
shared.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001304  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000109c  00800200  00800200  00001378  2**0
                  ALLOC
  2 .stab         0000012c  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000001b  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000014bf  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000069b  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000285  00000000  00000000  00001b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000173  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003bc  00000000  00000000  00001f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cf  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000722  00000000  00000000  0000270f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
       8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
       c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      10:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      14:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      18:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      1c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      20:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      24:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      28:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      2c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      30:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      34:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      38:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      3c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      40:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      44:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      48:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      4c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      50:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      54:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      58:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      5c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      60:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      68:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      6c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      70:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      78:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      7c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      80:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      84:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      88:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      8c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      90:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      94:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      98:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      9c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      a0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      a4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      a8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      ac:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      b0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      b4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      b8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      bc:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      c0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      c4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      c8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      cc:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      d0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      d4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      d8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      dc:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      e0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <Task_Terminate>
      e8:	0c 94 2c 04 	jmp	0x858	; 0x858 <Pong>
      ec:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <Ping>

000000f0 <__trampolines_end>:
      f0:	45 46       	sbci	r20, 0x65	; 101
      f2:	47 65       	ori	r20, 0x57	; 87
      f4:	66 67       	ori	r22, 0x76	; 118
	...

000000f7 <__c.2141>:
      f7:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000107 <__c.2274>:
     107:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_clear_bss>:
     122:	22 e1       	ldi	r18, 0x12	; 18
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	ac 39       	cpi	r26, 0x9C	; 156
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 60 04 	call	0x8c0	; 0x8c0 <main>
     136:	0c 94 80 09 	jmp	0x1300	; 0x1300 <_exit>

0000013a <__bad_interrupt>:
     13a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013e <enable_global_interrupts>:
/**
 * Enables inturupts by setting the global inturupt flag
 * @param (void)
 * @return the previous state of the interrupt flag
 */
uint8_t enable_global_interrupts() {
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	1f 92       	push	r1
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
  uint8_t sreg = SREG;
     148:	8f e5       	ldi	r24, 0x5F	; 95
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	fc 01       	movw	r30, r24
     14e:	80 81       	ld	r24, Z
     150:	89 83       	std	Y+1, r24	; 0x01
  asm volatile ("sei"::);
     152:	78 94       	sei
  return sreg;
     154:	89 81       	ldd	r24, Y+1	; 0x01
}
     156:	0f 90       	pop	r0
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <disable_global_interrupts>:
/**
 * Disables inturupts by setting the global inturupt flag
 * @param (void)
 * @return the previous state of the interrupt flag
 */
uint8_t disable_global_interrupts() {
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	1f 92       	push	r1
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
  uint8_t sreg = SREG;
     168:	8f e5       	ldi	r24, 0x5F	; 95
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	fc 01       	movw	r30, r24
     16e:	80 81       	ld	r24, Z
     170:	89 83       	std	Y+1, r24	; 0x01
  asm volatile ("cli"::);
     172:	f8 94       	cli
  return sreg;
     174:	89 81       	ldd	r24, Y+1	; 0x01
}
     176:	0f 90       	pop	r0
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <restore_global_interrupts>:
/**
 * Restores inturupts by setting the global inturupt flag
 * @param (void)
 * @return the previous state of the interrupt flag
 */
uint8_t restore_global_interrupts(uint8_t saved_sreg) {
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	1f 92       	push	r1
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	89 83       	std	Y+1, r24	; 0x01
  if (saved_sreg & 0x80) {
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	88 23       	and	r24, r24
     18e:	1c f4       	brge	.+6      	; 0x196 <restore_global_interrupts+0x18>
    return enable_global_interrupts();
     190:	0e 94 9f 00 	call	0x13e	; 0x13e <enable_global_interrupts>
     194:	02 c0       	rjmp	.+4      	; 0x19a <restore_global_interrupts+0x1c>
  } else {
    return disable_global_interrupts();
     196:	0e 94 af 00 	call	0x15e	; 0x15e <disable_global_interrupts>
  }
}
     19a:	0f 90       	pop	r0
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <Kernel_Create_Task_At>:
 * When creating a new task, it is important to initialize its stack just like
 * it has called "Enter_Kernel()"; so that when we switch to it later, we
 * can just restore its execution context on its stack.
 * (See file "cswitch.S" for details.)
 */
void Kernel_Create_Task_At(ProcessDescriptor *process, voidfuncptr function){
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	00 d0       	rcall	.+0      	; 0x1a8 <Kernel_Create_Task_At+0x6>
     1a8:	00 d0       	rcall	.+0      	; 0x1aa <Kernel_Create_Task_At+0x8>
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
     1ae:	9c 83       	std	Y+4, r25	; 0x04
     1b0:	8b 83       	std	Y+3, r24	; 0x03
     1b2:	7e 83       	std	Y+6, r23	; 0x06
     1b4:	6d 83       	std	Y+5, r22	; 0x05
  uint8_t * stack_pointer;
  stack_pointer = (unsigned char *) &(process->workSpace[WORKSPACE-1]);
     1b6:	8b 81       	ldd	r24, Y+3	; 0x03
     1b8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ba:	8f 5f       	subi	r24, 0xFF	; 255
     1bc:	9e 4f       	sbci	r25, 0xFE	; 254
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
  memset(&(process->workSpace), 0, WORKSPACE);
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	9c 81       	ldd	r25, Y+4	; 0x04
     1c6:	02 96       	adiw	r24, 0x02	; 2
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	51 e0       	ldi	r21, 0x01	; 1
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	0e 94 8f 08 	call	0x111e	; 0x111e <memset>

  *(unsigned char *)stack_pointer-- = ((unsigned int)Task_Terminate) & 0xff;
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	9a 81       	ldd	r25, Y+2	; 0x02
     1d8:	9c 01       	movw	r18, r24
     1da:	21 50       	subi	r18, 0x01	; 1
     1dc:	31 09       	sbc	r19, r1
     1de:	3a 83       	std	Y+2, r19	; 0x02
     1e0:	29 83       	std	Y+1, r18	; 0x01
     1e2:	25 ed       	ldi	r18, 0xD5	; 213
     1e4:	32 e0       	ldi	r19, 0x02	; 2
     1e6:	fc 01       	movw	r30, r24
     1e8:	20 83       	st	Z, r18
  *(unsigned char *)stack_pointer-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	9a 81       	ldd	r25, Y+2	; 0x02
     1ee:	9c 01       	movw	r18, r24
     1f0:	21 50       	subi	r18, 0x01	; 1
     1f2:	31 09       	sbc	r19, r1
     1f4:	3a 83       	std	Y+2, r19	; 0x02
     1f6:	29 83       	std	Y+1, r18	; 0x01
     1f8:	25 ed       	ldi	r18, 0xD5	; 213
     1fa:	32 e0       	ldi	r19, 0x02	; 2
     1fc:	23 2f       	mov	r18, r19
     1fe:	33 27       	eor	r19, r19
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18

  //Place return address of function at bottom of stack
  *(unsigned char *)stack_pointer-- = ((unsigned int)function) & 0xff;
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	9a 81       	ldd	r25, Y+2	; 0x02
     208:	9c 01       	movw	r18, r24
     20a:	21 50       	subi	r18, 0x01	; 1
     20c:	31 09       	sbc	r19, r1
     20e:	3a 83       	std	Y+2, r19	; 0x02
     210:	29 83       	std	Y+1, r18	; 0x01
     212:	2d 81       	ldd	r18, Y+5	; 0x05
     214:	3e 81       	ldd	r19, Y+6	; 0x06
     216:	fc 01       	movw	r30, r24
     218:	20 83       	st	Z, r18
  //Store terminate at the bottom of stack to protect against stack underrun.
  *(unsigned char *)stack_pointer-- = (((unsigned int)function) >> 8) & 0xff;
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	9a 81       	ldd	r25, Y+2	; 0x02
     21e:	9c 01       	movw	r18, r24
     220:	21 50       	subi	r18, 0x01	; 1
     222:	31 09       	sbc	r19, r1
     224:	3a 83       	std	Y+2, r19	; 0x02
     226:	29 83       	std	Y+1, r18	; 0x01
     228:	2d 81       	ldd	r18, Y+5	; 0x05
     22a:	3e 81       	ldd	r19, Y+6	; 0x06
     22c:	23 2f       	mov	r18, r19
     22e:	33 27       	eor	r19, r19
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18
  *(unsigned char *)stack_pointer-- = 0;
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	9a 81       	ldd	r25, Y+2	; 0x02
     238:	9c 01       	movw	r18, r24
     23a:	21 50       	subi	r18, 0x01	; 1
     23c:	31 09       	sbc	r19, r1
     23e:	3a 83       	std	Y+2, r19	; 0x02
     240:	29 83       	std	Y+1, r18	; 0x01
     242:	fc 01       	movw	r30, r24
     244:	10 82       	st	Z, r1

  // Decrement stack pointer for the 32 registers and the EIND
  stack_pointer -= 34;
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	9a 81       	ldd	r25, Y+2	; 0x02
     24a:	82 97       	sbiw	r24, 0x22	; 34
     24c:	9a 83       	std	Y+2, r25	; 0x02
     24e:	89 83       	std	Y+1, r24	; 0x01

  process->stack_pointer = stack_pointer;
     250:	8b 81       	ldd	r24, Y+3	; 0x03
     252:	9c 81       	ldd	r25, Y+4	; 0x04
     254:	29 81       	ldd	r18, Y+1	; 0x01
     256:	3a 81       	ldd	r19, Y+2	; 0x02
     258:	fc 01       	movw	r30, r24
     25a:	31 83       	std	Z+1, r19	; 0x01
     25c:	20 83       	st	Z, r18
  process->code = function;
     25e:	8b 81       	ldd	r24, Y+3	; 0x03
     260:	9c 81       	ldd	r25, Y+4	; 0x04
     262:	8d 5f       	subi	r24, 0xFD	; 253
     264:	9e 4f       	sbci	r25, 0xFE	; 254
     266:	2d 81       	ldd	r18, Y+5	; 0x05
     268:	3e 81       	ldd	r19, Y+6	; 0x06
     26a:	fc 01       	movw	r30, r24
     26c:	31 83       	std	Z+1, r19	; 0x01
     26e:	20 83       	st	Z, r18
  process->request = NONE;
     270:	8b 81       	ldd	r24, Y+3	; 0x03
     272:	9c 81       	ldd	r25, Y+4	; 0x04
     274:	8b 5f       	subi	r24, 0xFB	; 251
     276:	9e 4f       	sbci	r25, 0xFE	; 254
     278:	fc 01       	movw	r30, r24
     27a:	10 82       	st	Z, r1
  process->state = READY;
     27c:	8b 81       	ldd	r24, Y+3	; 0x03
     27e:	9c 81       	ldd	r25, Y+4	; 0x04
     280:	8e 5f       	subi	r24, 0xFE	; 254
     282:	9e 4f       	sbci	r25, 0xFE	; 254
     284:	21 e0       	ldi	r18, 0x01	; 1
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
}
     28a:	26 96       	adiw	r28, 0x06	; 6
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	de bf       	out	0x3e, r29	; 62
     292:	0f be       	out	0x3f, r0	; 63
     294:	cd bf       	out	0x3d, r28	; 61
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <Kernel_Create_Task>:


/**
 * Create a new task
 */
static PID Kernel_Create_Task(voidfuncptr f) {
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <Kernel_Create_Task+0x6>
     2a2:	1f 92       	push	r1
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	9c 83       	std	Y+4, r25	; 0x04
     2aa:	8b 83       	std	Y+3, r24	; 0x03
   int id = NULL;
     2ac:	1a 82       	std	Y+2, r1	; 0x02
     2ae:	19 82       	std	Y+1, r1	; 0x01
   if (tasks == MAXTHREAD) return id;
     2b0:	80 91 04 02 	lds	r24, 0x0204
     2b4:	90 91 05 02 	lds	r25, 0x0205
     2b8:	80 31       	cpi	r24, 0x10	; 16
     2ba:	91 05       	cpc	r25, r1
     2bc:	19 f4       	brne	.+6      	; 0x2c4 <Kernel_Create_Task+0x28>
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	9a 81       	ldd	r25, Y+2	; 0x02
     2c2:	3c c0       	rjmp	.+120    	; 0x33c <Kernel_Create_Task+0xa0>

   /* find a DEAD ProcessDescriptor that we can use  */
   for (id = 0; id < MAXTHREAD; id++) {
     2c4:	1a 82       	std	Y+2, r1	; 0x02
     2c6:	19 82       	std	Y+1, r1	; 0x01
     2c8:	17 c0       	rjmp	.+46     	; 0x2f8 <Kernel_Create_Task+0x5c>
       if (Process[id].state == DEAD) break;
     2ca:	49 81       	ldd	r20, Y+1	; 0x01
     2cc:	5a 81       	ldd	r21, Y+2	; 0x02
     2ce:	29 e0       	ldi	r18, 0x09	; 9
     2d0:	31 e0       	ldi	r19, 0x01	; 1
     2d2:	42 9f       	mul	r20, r18
     2d4:	c0 01       	movw	r24, r0
     2d6:	43 9f       	mul	r20, r19
     2d8:	90 0d       	add	r25, r0
     2da:	52 9f       	mul	r21, r18
     2dc:	90 0d       	add	r25, r0
     2de:	11 24       	eor	r1, r1
     2e0:	88 5f       	subi	r24, 0xF8	; 248
     2e2:	9c 4f       	sbci	r25, 0xFC	; 252
     2e4:	fc 01       	movw	r30, r24
     2e6:	80 81       	ld	r24, Z
     2e8:	88 23       	and	r24, r24
     2ea:	09 f4       	brne	.+2      	; 0x2ee <Kernel_Create_Task+0x52>
     2ec:	0a c0       	rjmp	.+20     	; 0x302 <Kernel_Create_Task+0x66>
static PID Kernel_Create_Task(voidfuncptr f) {
   int id = NULL;
   if (tasks == MAXTHREAD) return id;

   /* find a DEAD ProcessDescriptor that we can use  */
   for (id = 0; id < MAXTHREAD; id++) {
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	9a 81       	ldd	r25, Y+2	; 0x02
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	9a 83       	std	Y+2, r25	; 0x02
     2f6:	89 83       	std	Y+1, r24	; 0x01
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	9a 81       	ldd	r25, Y+2	; 0x02
     2fc:	80 31       	cpi	r24, 0x10	; 16
     2fe:	91 05       	cpc	r25, r1
     300:	24 f3       	brlt	.-56     	; 0x2ca <Kernel_Create_Task+0x2e>
       if (Process[id].state == DEAD) break;
   }

   ++tasks;
     302:	80 91 04 02 	lds	r24, 0x0204
     306:	90 91 05 02 	lds	r25, 0x0205
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	90 93 05 02 	sts	0x0205, r25
     310:	80 93 04 02 	sts	0x0204, r24
   Kernel_Create_Task_At( &(Process[id]), f );
     314:	49 81       	ldd	r20, Y+1	; 0x01
     316:	5a 81       	ldd	r21, Y+2	; 0x02
     318:	29 e0       	ldi	r18, 0x09	; 9
     31a:	31 e0       	ldi	r19, 0x01	; 1
     31c:	42 9f       	mul	r20, r18
     31e:	c0 01       	movw	r24, r0
     320:	43 9f       	mul	r20, r19
     322:	90 0d       	add	r25, r0
     324:	52 9f       	mul	r21, r18
     326:	90 0d       	add	r25, r0
     328:	11 24       	eor	r1, r1
     32a:	8a 5f       	subi	r24, 0xFA	; 250
     32c:	9d 4f       	sbci	r25, 0xFD	; 253
     32e:	2b 81       	ldd	r18, Y+3	; 0x03
     330:	3c 81       	ldd	r19, Y+4	; 0x04
     332:	b9 01       	movw	r22, r18
     334:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Kernel_Create_Task_At>
   return id;
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <Dispatch>:

static void Dispatch() {
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
  while(Process[next_process].state != READY) {
     352:	0b c0       	rjmp	.+22     	; 0x36a <Dispatch+0x20>
    next_process = (next_process + 1) % MAXTHREAD;
     354:	80 91 00 02 	lds	r24, 0x0200
     358:	90 91 01 02 	lds	r25, 0x0201
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	8f 70       	andi	r24, 0x0F	; 15
     360:	99 27       	eor	r25, r25
     362:	90 93 01 02 	sts	0x0201, r25
     366:	80 93 00 02 	sts	0x0200, r24
   Kernel_Create_Task_At( &(Process[id]), f );
   return id;
}

static void Dispatch() {
  while(Process[next_process].state != READY) {
     36a:	40 91 00 02 	lds	r20, 0x0200
     36e:	50 91 01 02 	lds	r21, 0x0201
     372:	29 e0       	ldi	r18, 0x09	; 9
     374:	31 e0       	ldi	r19, 0x01	; 1
     376:	42 9f       	mul	r20, r18
     378:	c0 01       	movw	r24, r0
     37a:	43 9f       	mul	r20, r19
     37c:	90 0d       	add	r25, r0
     37e:	52 9f       	mul	r21, r18
     380:	90 0d       	add	r25, r0
     382:	11 24       	eor	r1, r1
     384:	88 5f       	subi	r24, 0xF8	; 248
     386:	9c 4f       	sbci	r25, 0xFC	; 252
     388:	fc 01       	movw	r30, r24
     38a:	80 81       	ld	r24, Z
     38c:	81 30       	cpi	r24, 0x01	; 1
     38e:	11 f7       	brne	.-60     	; 0x354 <Dispatch+0xa>
    next_process = (next_process + 1) % MAXTHREAD;
  }
  current_process = &(Process[next_process]);
     390:	40 91 00 02 	lds	r20, 0x0200
     394:	50 91 01 02 	lds	r21, 0x0201
     398:	29 e0       	ldi	r18, 0x09	; 9
     39a:	31 e0       	ldi	r19, 0x01	; 1
     39c:	42 9f       	mul	r20, r18
     39e:	c0 01       	movw	r24, r0
     3a0:	43 9f       	mul	r20, r19
     3a2:	90 0d       	add	r25, r0
     3a4:	52 9f       	mul	r21, r18
     3a6:	90 0d       	add	r25, r0
     3a8:	11 24       	eor	r1, r1
     3aa:	8a 5f       	subi	r24, 0xFA	; 250
     3ac:	9d 4f       	sbci	r25, 0xFD	; 253
     3ae:	90 93 97 12 	sts	0x1297, r25
     3b2:	80 93 96 12 	sts	0x1296, r24
  current_stack_pointer = current_process->stack_pointer;
     3b6:	80 91 96 12 	lds	r24, 0x1296
     3ba:	90 91 97 12 	lds	r25, 0x1297
     3be:	fc 01       	movw	r30, r24
     3c0:	80 81       	ld	r24, Z
     3c2:	91 81       	ldd	r25, Z+1	; 0x01
     3c4:	90 93 9b 12 	sts	0x129B, r25
     3c8:	80 93 9a 12 	sts	0x129A, r24
  current_process->state = RUNNING;
     3cc:	80 91 96 12 	lds	r24, 0x1296
     3d0:	90 91 97 12 	lds	r25, 0x1297
     3d4:	8e 5f       	subi	r24, 0xFE	; 254
     3d6:	9e 4f       	sbci	r25, 0xFE	; 254
     3d8:	22 e0       	ldi	r18, 0x02	; 2
     3da:	fc 01       	movw	r30, r24
     3dc:	20 83       	st	Z, r18
  next_process = (next_process + 1) % MAXTHREAD;
     3de:	80 91 00 02 	lds	r24, 0x0200
     3e2:	90 91 01 02 	lds	r25, 0x0201
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	8f 70       	andi	r24, 0x0F	; 15
     3ea:	99 27       	eor	r25, r25
     3ec:	90 93 01 02 	sts	0x0201, r25
     3f0:	80 93 00 02 	sts	0x0200, r24
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <Next_Kernel_Request>:

static void Next_Kernel_Request() {
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
  Dispatch();  /* select a new task to run */
     402:	0e 94 a5 01 	call	0x34a	; 0x34a <Dispatch>

  for (;;) {
    current_process->request = NONE; /* clear its request */
     406:	80 91 96 12 	lds	r24, 0x1296
     40a:	90 91 97 12 	lds	r25, 0x1297
     40e:	8b 5f       	subi	r24, 0xFB	; 251
     410:	9e 4f       	sbci	r25, 0xFE	; 254
     412:	fc 01       	movw	r30, r24
     414:	10 82       	st	Z, r1

    /* activate this newly selected task */
    current_stack_pointer = current_process->stack_pointer;
     416:	80 91 96 12 	lds	r24, 0x1296
     41a:	90 91 97 12 	lds	r25, 0x1297
     41e:	fc 01       	movw	r30, r24
     420:	80 81       	ld	r24, Z
     422:	91 81       	ldd	r25, Z+1	; 0x01
     424:	90 93 9b 12 	sts	0x129B, r25
     428:	80 93 9a 12 	sts	0x129A, r24
    Exit_Kernel();    /* or CSwitch() */
     42c:	0e 94 85 04 	call	0x90a	; 0x90a <CSwitch>

    /* if this task makes a system call, it will return to here! */

    /* save the Cp's stack pointer */
    current_process->stack_pointer = current_stack_pointer;
     430:	80 91 96 12 	lds	r24, 0x1296
     434:	90 91 97 12 	lds	r25, 0x1297
     438:	20 91 9a 12 	lds	r18, 0x129A
     43c:	30 91 9b 12 	lds	r19, 0x129B
     440:	fc 01       	movw	r30, r24
     442:	31 83       	std	Z+1, r19	; 0x01
     444:	20 83       	st	Z, r18

    switch(current_process->request){
     446:	80 91 96 12 	lds	r24, 0x1296
     44a:	90 91 97 12 	lds	r25, 0x1297
     44e:	8b 5f       	subi	r24, 0xFB	; 251
     450:	9e 4f       	sbci	r25, 0xFE	; 254
     452:	fc 01       	movw	r30, r24
     454:	80 81       	ld	r24, Z
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	91 05       	cpc	r25, r1
     45e:	69 f0       	breq	.+26     	; 0x47a <Next_Kernel_Request+0x80>
     460:	82 30       	cpi	r24, 0x02	; 2
     462:	91 05       	cpc	r25, r1
     464:	1c f4       	brge	.+6      	; 0x46c <Next_Kernel_Request+0x72>
     466:	00 97       	sbiw	r24, 0x00	; 0
     468:	a1 f0       	breq	.+40     	; 0x492 <Next_Kernel_Request+0x98>
      case TERMINATE:
        /* deallocate all resources used by this task */
        current_process->state = DEAD;
        Dispatch();
        break;
      default: break;
     46a:	2a c0       	rjmp	.+84     	; 0x4c0 <Next_Kernel_Request+0xc6>
    /* if this task makes a system call, it will return to here! */

    /* save the Cp's stack pointer */
    current_process->stack_pointer = current_stack_pointer;

    switch(current_process->request){
     46c:	82 30       	cpi	r24, 0x02	; 2
     46e:	91 05       	cpc	r25, r1
     470:	81 f0       	breq	.+32     	; 0x492 <Next_Kernel_Request+0x98>
     472:	83 30       	cpi	r24, 0x03	; 3
     474:	91 05       	cpc	r25, r1
     476:	c9 f0       	breq	.+50     	; 0x4aa <Next_Kernel_Request+0xb0>
      case TERMINATE:
        /* deallocate all resources used by this task */
        current_process->state = DEAD;
        Dispatch();
        break;
      default: break;
     478:	23 c0       	rjmp	.+70     	; 0x4c0 <Next_Kernel_Request+0xc6>
    /* save the Cp's stack pointer */
    current_process->stack_pointer = current_stack_pointer;

    switch(current_process->request){
      case CREATE:
        Kernel_Create_Task (current_process->code);
     47a:	80 91 96 12 	lds	r24, 0x1296
     47e:	90 91 97 12 	lds	r25, 0x1297
     482:	8d 5f       	subi	r24, 0xFD	; 253
     484:	9e 4f       	sbci	r25, 0xFE	; 254
     486:	fc 01       	movw	r30, r24
     488:	80 81       	ld	r24, Z
     48a:	91 81       	ldd	r25, Z+1	; 0x01
     48c:	0e 94 4e 01 	call	0x29c	; 0x29c <Kernel_Create_Task>
        break;
     490:	17 c0       	rjmp	.+46     	; 0x4c0 <Next_Kernel_Request+0xc6>
      case NEXT:
      case NONE:
        /* NONE could be caused by a timer interrupt */
        current_process->state = READY;
     492:	80 91 96 12 	lds	r24, 0x1296
     496:	90 91 97 12 	lds	r25, 0x1297
     49a:	8e 5f       	subi	r24, 0xFE	; 254
     49c:	9e 4f       	sbci	r25, 0xFE	; 254
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
        Dispatch();
     4a4:	0e 94 a5 01 	call	0x34a	; 0x34a <Dispatch>
        break;
     4a8:	0b c0       	rjmp	.+22     	; 0x4c0 <Next_Kernel_Request+0xc6>
      case TERMINATE:
        /* deallocate all resources used by this task */
        current_process->state = DEAD;
     4aa:	80 91 96 12 	lds	r24, 0x1296
     4ae:	90 91 97 12 	lds	r25, 0x1297
     4b2:	8e 5f       	subi	r24, 0xFE	; 254
     4b4:	9e 4f       	sbci	r25, 0xFE	; 254
     4b6:	fc 01       	movw	r30, r24
     4b8:	10 82       	st	Z, r1
        Dispatch();
     4ba:	0e 94 a5 01 	call	0x34a	; 0x34a <Dispatch>
        break;
     4be:	00 00       	nop
      default: break;
    }
  }
     4c0:	a2 cf       	rjmp	.-188    	; 0x406 <Next_Kernel_Request+0xc>

000004c2 <OS_Abort>:
/*******************************************************************************
 * Function Definitions OS API
 * see os.h
 ******************************************************************************/

void OS_Abort(void) {
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	1f 92       	push	r1
     4c8:	1f 92       	push	r1
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
  disable_global_interrupts();
     4ce:	0e 94 af 00 	call	0x15e	; 0x15e <disable_global_interrupts>
  for (int i = 0; i < 42; i++) {
     4d2:	1a 82       	std	Y+2, r1	; 0x02
     4d4:	19 82       	std	Y+1, r1	; 0x01
     4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <OS_Abort+0x20>
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	9a 83       	std	Y+2, r25	; 0x02
     4e0:	89 83       	std	Y+1, r24	; 0x01
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	8a 32       	cpi	r24, 0x2A	; 42
     4e8:	91 05       	cpc	r25, r1
     4ea:	b4 f3       	brlt	.-20     	; 0x4d8 <OS_Abort+0x16>
    // BLINK LED 13
  }
  soft_reset();
     4ec:	88 e1       	ldi	r24, 0x18	; 24
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	28 e0       	ldi	r18, 0x08	; 8
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	a8 95       	wdr
     4f8:	80 93 60 00 	sts	0x0060, r24
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	20 93 60 00 	sts	0x0060, r18
     502:	ff cf       	rjmp	.-2      	; 0x502 <OS_Abort+0x40>

00000504 <Task_Create>:
}

PID Task_Create( void (*f)(void), PRIORITY py, int arg) {
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
     50c:	28 97       	sbiw	r28, 0x08	; 8
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	de bf       	out	0x3e, r29	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	cd bf       	out	0x3d, r28	; 61
     518:	9d 83       	std	Y+5, r25	; 0x05
     51a:	8c 83       	std	Y+4, r24	; 0x04
     51c:	6e 83       	std	Y+6, r22	; 0x06
     51e:	58 87       	std	Y+8, r21	; 0x08
     520:	4f 83       	std	Y+7, r20	; 0x07
  PID pid;
  if (KernelActive) {
     522:	80 91 02 02 	lds	r24, 0x0202
     526:	90 91 03 02 	lds	r25, 0x0203
     52a:	00 97       	sbiw	r24, 0x00	; 0
     52c:	e9 f0       	breq	.+58     	; 0x568 <Task_Create+0x64>
    uint8_t inturupt_flag = disable_global_interrupts();
     52e:	0e 94 af 00 	call	0x15e	; 0x15e <disable_global_interrupts>
     532:	8b 83       	std	Y+3, r24	; 0x03
    current_process->request = CREATE;
     534:	80 91 96 12 	lds	r24, 0x1296
     538:	90 91 97 12 	lds	r25, 0x1297
     53c:	8b 5f       	subi	r24, 0xFB	; 251
     53e:	9e 4f       	sbci	r25, 0xFE	; 254
     540:	21 e0       	ldi	r18, 0x01	; 1
     542:	fc 01       	movw	r30, r24
     544:	20 83       	st	Z, r18
    current_process->code = f;
     546:	80 91 96 12 	lds	r24, 0x1296
     54a:	90 91 97 12 	lds	r25, 0x1297
     54e:	8d 5f       	subi	r24, 0xFD	; 253
     550:	9e 4f       	sbci	r25, 0xFE	; 254
     552:	2c 81       	ldd	r18, Y+4	; 0x04
     554:	3d 81       	ldd	r19, Y+5	; 0x05
     556:	fc 01       	movw	r30, r24
     558:	31 83       	std	Z+1, r19	; 0x01
     55a:	20 83       	st	Z, r18
    Enter_Kernel();
     55c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Enter_Kernel>
    restore_global_interrupts(inturupt_flag);
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	0e 94 bf 00 	call	0x17e	; 0x17e <restore_global_interrupts>
     566:	06 c0       	rjmp	.+12     	; 0x574 <Task_Create+0x70>

  } else {
     /* call the RTOS function directly */
     pid = Kernel_Create_Task(f);
     568:	8c 81       	ldd	r24, Y+4	; 0x04
     56a:	9d 81       	ldd	r25, Y+5	; 0x05
     56c:	0e 94 4e 01 	call	0x29c	; 0x29c <Kernel_Create_Task>
     570:	9a 83       	std	Y+2, r25	; 0x02
     572:	89 83       	std	Y+1, r24	; 0x01
  }
  Process[pid].priority = py;
     574:	49 81       	ldd	r20, Y+1	; 0x01
     576:	5a 81       	ldd	r21, Y+2	; 0x02
     578:	29 e0       	ldi	r18, 0x09	; 9
     57a:	31 e0       	ldi	r19, 0x01	; 1
     57c:	42 9f       	mul	r20, r18
     57e:	c0 01       	movw	r24, r0
     580:	43 9f       	mul	r20, r19
     582:	90 0d       	add	r25, r0
     584:	52 9f       	mul	r21, r18
     586:	90 0d       	add	r25, r0
     588:	11 24       	eor	r1, r1
     58a:	84 5f       	subi	r24, 0xF4	; 244
     58c:	9c 4f       	sbci	r25, 0xFC	; 252
     58e:	2e 81       	ldd	r18, Y+6	; 0x06
     590:	fc 01       	movw	r30, r24
     592:	20 83       	st	Z, r18
  return pid;
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	9a 81       	ldd	r25, Y+2	; 0x02
}
     598:	28 96       	adiw	r28, 0x08	; 8
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <Task_Terminate>:

void Task_Terminate(void) {
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
  if (KernelActive) {
     5b2:	80 91 02 02 	lds	r24, 0x0202
     5b6:	90 91 03 02 	lds	r25, 0x0203
     5ba:	00 97       	sbiw	r24, 0x00	; 0
     5bc:	69 f0       	breq	.+26     	; 0x5d8 <Task_Terminate+0x2e>
    disable_global_interrupts();
     5be:	0e 94 af 00 	call	0x15e	; 0x15e <disable_global_interrupts>
    current_process->request = TERMINATE;
     5c2:	80 91 96 12 	lds	r24, 0x1296
     5c6:	90 91 97 12 	lds	r25, 0x1297
     5ca:	8b 5f       	subi	r24, 0xFB	; 251
     5cc:	9e 4f       	sbci	r25, 0xFE	; 254
     5ce:	23 e0       	ldi	r18, 0x03	; 3
     5d0:	fc 01       	movw	r30, r24
     5d2:	20 83       	st	Z, r18
    Enter_Kernel();
     5d4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Enter_Kernel>
  }
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <Task_Yield>:

void Task_Yield(void) {
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
  if (KernelActive) {
     5e6:	80 91 02 02 	lds	r24, 0x0202
     5ea:	90 91 03 02 	lds	r25, 0x0203
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	69 f0       	breq	.+26     	; 0x60c <Task_Yield+0x2e>
    disable_global_interrupts();
     5f2:	0e 94 af 00 	call	0x15e	; 0x15e <disable_global_interrupts>
    current_process->request = NEXT;
     5f6:	80 91 96 12 	lds	r24, 0x1296
     5fa:	90 91 97 12 	lds	r25, 0x1297
     5fe:	8b 5f       	subi	r24, 0xFB	; 251
     600:	9e 4f       	sbci	r25, 0xFE	; 254
     602:	22 e0       	ldi	r18, 0x02	; 2
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18
    Enter_Kernel();
     608:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Enter_Kernel>
  }
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <Task_GetArg>:

/**
 * @brief Retrieve the assigned parameter.
 */
int Task_GetArg(void) {
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	00 d0       	rcall	.+0      	; 0x618 <Task_GetArg+0x6>
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
  int arg;
  uint8_t sreg;

  // Save interupt flag
  sreg = SREG;
     61c:	8f e5       	ldi	r24, 0x5F	; 95
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	fc 01       	movw	r30, r24
     622:	80 81       	ld	r24, Z
     624:	89 83       	std	Y+1, r24	; 0x01
  disable_global_interrupts();
     626:	0e 94 af 00 	call	0x15e	; 0x15e <disable_global_interrupts>

  arg = current_process->argument;
     62a:	80 91 96 12 	lds	r24, 0x1296
     62e:	90 91 97 12 	lds	r25, 0x1297
     632:	89 5f       	subi	r24, 0xF9	; 249
     634:	9e 4f       	sbci	r25, 0xFE	; 254
     636:	fc 01       	movw	r30, r24
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	9b 83       	std	Y+3, r25	; 0x03
     63e:	8a 83       	std	Y+2, r24	; 0x02

  // Restore interupt flag
  SREG = sreg;
     640:	8f e5       	ldi	r24, 0x5F	; 95
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	29 81       	ldd	r18, Y+1	; 0x01
     646:	fc 01       	movw	r30, r24
     648:	20 83       	st	Z, r18
  return arg;
     64a:	8a 81       	ldd	r24, Y+2	; 0x02
     64c:	9b 81       	ldd	r25, Y+3	; 0x03
}
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <Task_Suspend>:

void Task_Suspend(PID p) {
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	1f 92       	push	r1
     660:	1f 92       	push	r1
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	9a 83       	std	Y+2, r25	; 0x02
     668:	89 83       	std	Y+1, r24	; 0x01

}
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <Task_Resume>:

void Task_Resume(PID p) {
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	1f 92       	push	r1
     67a:	1f 92       	push	r1
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	9a 83       	std	Y+2, r25	; 0x02
     682:	89 83       	std	Y+1, r24	; 0x01

}
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <Task_Sleep>:

void Task_Sleep(TICK t) {
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	1f 92       	push	r1
     694:	1f 92       	push	r1
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	9a 83       	std	Y+2, r25	; 0x02
     69c:	89 83       	std	Y+1, r24	; 0x01

}
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <Mutex_Init>:

MUTEX Mutex_Init(void) {
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
  // TODO
  return 0;
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <Mutex_Lock>:

void Mutex_Lock(MUTEX m) {
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	1f 92       	push	r1
     6c0:	1f 92       	push	r1
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	89 83       	std	Y+1, r24	; 0x01

}
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <Mutex_Unlock>:

void Mutex_Unlock(MUTEX m) {
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	1f 92       	push	r1
     6da:	1f 92       	push	r1
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	9a 83       	std	Y+2, r25	; 0x02
     6e2:	89 83       	std	Y+1, r24	; 0x01

}
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <Event_Init>:

EVENT Event_Init(void) {
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
  // TODO
  return 0;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <Event_Wait>:

void Event_Wait(EVENT e) {
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	1f 92       	push	r1
     706:	1f 92       	push	r1
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	9a 83       	std	Y+2, r25	; 0x02
     70e:	89 83       	std	Y+1, r24	; 0x01

}
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	08 95       	ret

0000071a <Event_Signal>:

void Event_Signal(EVENT e) {
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	1f 92       	push	r1
     720:	1f 92       	push	r1
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	9a 83       	std	Y+2, r25	; 0x02
     728:	89 83       	std	Y+1, r24	; 0x01

}
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <OS_Init>:

/**
 * This function initializes the RTOS and must be called before any other
 * system calls.
 */
void OS_Init() {
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	1f 92       	push	r1
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
  int id;
  tasks = 0;
     740:	10 92 05 02 	sts	0x0205, r1
     744:	10 92 04 02 	sts	0x0204, r1
  KernelActive = 0;
     748:	10 92 03 02 	sts	0x0203, r1
     74c:	10 92 02 02 	sts	0x0202, r1
  next_process = 0;
     750:	10 92 01 02 	sts	0x0201, r1
     754:	10 92 00 02 	sts	0x0200, r1
  //Reminder: Clear the memory for the task on creation.
  for (id = 0; id < MAXTHREAD; id++) {
     758:	1a 82       	std	Y+2, r1	; 0x02
     75a:	19 82       	std	Y+1, r1	; 0x01
     75c:	27 c0       	rjmp	.+78     	; 0x7ac <OS_Init+0x78>
    memset(&(Process[id]),0,sizeof(ProcessDescriptor));
     75e:	49 81       	ldd	r20, Y+1	; 0x01
     760:	5a 81       	ldd	r21, Y+2	; 0x02
     762:	29 e0       	ldi	r18, 0x09	; 9
     764:	31 e0       	ldi	r19, 0x01	; 1
     766:	42 9f       	mul	r20, r18
     768:	c0 01       	movw	r24, r0
     76a:	43 9f       	mul	r20, r19
     76c:	90 0d       	add	r25, r0
     76e:	52 9f       	mul	r21, r18
     770:	90 0d       	add	r25, r0
     772:	11 24       	eor	r1, r1
     774:	8a 5f       	subi	r24, 0xFA	; 250
     776:	9d 4f       	sbci	r25, 0xFD	; 253
     778:	49 e0       	ldi	r20, 0x09	; 9
     77a:	51 e0       	ldi	r21, 0x01	; 1
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	0e 94 8f 08 	call	0x111e	; 0x111e <memset>
    Process[id].state = DEAD;
     784:	49 81       	ldd	r20, Y+1	; 0x01
     786:	5a 81       	ldd	r21, Y+2	; 0x02
     788:	29 e0       	ldi	r18, 0x09	; 9
     78a:	31 e0       	ldi	r19, 0x01	; 1
     78c:	42 9f       	mul	r20, r18
     78e:	c0 01       	movw	r24, r0
     790:	43 9f       	mul	r20, r19
     792:	90 0d       	add	r25, r0
     794:	52 9f       	mul	r21, r18
     796:	90 0d       	add	r25, r0
     798:	11 24       	eor	r1, r1
     79a:	88 5f       	subi	r24, 0xF8	; 248
     79c:	9c 4f       	sbci	r25, 0xFC	; 252
     79e:	fc 01       	movw	r30, r24
     7a0:	10 82       	st	Z, r1
  int id;
  tasks = 0;
  KernelActive = 0;
  next_process = 0;
  //Reminder: Clear the memory for the task on creation.
  for (id = 0; id < MAXTHREAD; id++) {
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	9a 83       	std	Y+2, r25	; 0x02
     7aa:	89 83       	std	Y+1, r24	; 0x01
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	80 31       	cpi	r24, 0x10	; 16
     7b2:	91 05       	cpc	r25, r1
     7b4:	a4 f2       	brlt	.-88     	; 0x75e <OS_Init+0x2a>
    memset(&(Process[id]),0,sizeof(ProcessDescriptor));
    Process[id].state = DEAD;
  }
}
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <OS_Start>:


/**
 * This function starts the RTOS after creating a few tasks.
 */
void OS_Start() {
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
  if ((!KernelActive) && (tasks > 0)) {
     7c8:	80 91 02 02 	lds	r24, 0x0202
     7cc:	90 91 03 02 	lds	r25, 0x0203
     7d0:	00 97       	sbiw	r24, 0x00	; 0
     7d2:	81 f4       	brne	.+32     	; 0x7f4 <OS_Start+0x34>
     7d4:	80 91 04 02 	lds	r24, 0x0204
     7d8:	90 91 05 02 	lds	r25, 0x0205
     7dc:	00 97       	sbiw	r24, 0x00	; 0
     7de:	51 f0       	breq	.+20     	; 0x7f4 <OS_Start+0x34>
    disable_global_interrupts();
     7e0:	0e 94 af 00 	call	0x15e	; 0x15e <disable_global_interrupts>
    KernelActive = 1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	90 93 03 02 	sts	0x0203, r25
     7ec:	80 93 02 02 	sts	0x0202, r24
    Next_Kernel_Request();
     7f0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Next_Kernel_Request>
  }
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <Ping>:

void Ping() {
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	00 d0       	rcall	.+0      	; 0x800 <Ping+0x6>
     800:	1f 92       	push	r1
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
  unsigned long x = 0;
     806:	19 82       	std	Y+1, r1	; 0x01
     808:	1a 82       	std	Y+2, r1	; 0x02
     80a:	1b 82       	std	Y+3, r1	; 0x03
     80c:	1c 82       	std	Y+4, r1	; 0x04
  for(;;) {
    PORTB |= (1<<PB7);    // ON
     80e:	85 e2       	ldi	r24, 0x25	; 37
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	25 e2       	ldi	r18, 0x25	; 37
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	f9 01       	movw	r30, r18
     818:	20 81       	ld	r18, Z
     81a:	20 68       	ori	r18, 0x80	; 128
     81c:	fc 01       	movw	r30, r24
     81e:	20 83       	st	Z, r18
    for(x=0; x < 1000000; x++) {}
     820:	19 82       	std	Y+1, r1	; 0x01
     822:	1a 82       	std	Y+2, r1	; 0x02
     824:	1b 82       	std	Y+3, r1	; 0x03
     826:	1c 82       	std	Y+4, r1	; 0x04
     828:	0b c0       	rjmp	.+22     	; 0x840 <Ping+0x46>
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	9a 81       	ldd	r25, Y+2	; 0x02
     82e:	ab 81       	ldd	r26, Y+3	; 0x03
     830:	bc 81       	ldd	r27, Y+4	; 0x04
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	a1 1d       	adc	r26, r1
     836:	b1 1d       	adc	r27, r1
     838:	89 83       	std	Y+1, r24	; 0x01
     83a:	9a 83       	std	Y+2, r25	; 0x02
     83c:	ab 83       	std	Y+3, r26	; 0x03
     83e:	bc 83       	std	Y+4, r27	; 0x04
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	9a 81       	ldd	r25, Y+2	; 0x02
     844:	ab 81       	ldd	r26, Y+3	; 0x03
     846:	bc 81       	ldd	r27, Y+4	; 0x04
     848:	80 34       	cpi	r24, 0x40	; 64
     84a:	f2 e4       	ldi	r31, 0x42	; 66
     84c:	9f 07       	cpc	r25, r31
     84e:	ff e0       	ldi	r31, 0x0F	; 15
     850:	af 07       	cpc	r26, r31
     852:	b1 05       	cpc	r27, r1
     854:	50 f3       	brcs	.-44     	; 0x82a <Ping+0x30>
  }
     856:	db cf       	rjmp	.-74     	; 0x80e <Ping+0x14>

00000858 <Pong>:
}
void Pong() {
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	00 d0       	rcall	.+0      	; 0x85e <Pong+0x6>
     85e:	1f 92       	push	r1
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
  unsigned long x = 0;
     864:	19 82       	std	Y+1, r1	; 0x01
     866:	1a 82       	std	Y+2, r1	; 0x02
     868:	1b 82       	std	Y+3, r1	; 0x03
     86a:	1c 82       	std	Y+4, r1	; 0x04
  for(;;) {
    PORTB &= ~(1<<PB7); // OFF
     86c:	85 e2       	ldi	r24, 0x25	; 37
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	25 e2       	ldi	r18, 0x25	; 37
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	f9 01       	movw	r30, r18
     876:	20 81       	ld	r18, Z
     878:	2f 77       	andi	r18, 0x7F	; 127
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18
    for(x=0; x < 1000000; x++) {}
     87e:	19 82       	std	Y+1, r1	; 0x01
     880:	1a 82       	std	Y+2, r1	; 0x02
     882:	1b 82       	std	Y+3, r1	; 0x03
     884:	1c 82       	std	Y+4, r1	; 0x04
     886:	0b c0       	rjmp	.+22     	; 0x89e <Pong+0x46>
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
     88c:	ab 81       	ldd	r26, Y+3	; 0x03
     88e:	bc 81       	ldd	r27, Y+4	; 0x04
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	a1 1d       	adc	r26, r1
     894:	b1 1d       	adc	r27, r1
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	9a 83       	std	Y+2, r25	; 0x02
     89a:	ab 83       	std	Y+3, r26	; 0x03
     89c:	bc 83       	std	Y+4, r27	; 0x04
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	9a 81       	ldd	r25, Y+2	; 0x02
     8a2:	ab 81       	ldd	r26, Y+3	; 0x03
     8a4:	bc 81       	ldd	r27, Y+4	; 0x04
     8a6:	80 34       	cpi	r24, 0x40	; 64
     8a8:	f2 e4       	ldi	r31, 0x42	; 66
     8aa:	9f 07       	cpc	r25, r31
     8ac:	ff e0       	ldi	r31, 0x0F	; 15
     8ae:	af 07       	cpc	r26, r31
     8b0:	b1 05       	cpc	r27, r1
     8b2:	50 f3       	brcs	.-44     	; 0x888 <Pong+0x30>
  }
     8b4:	db cf       	rjmp	.-74     	; 0x86c <Pong+0x14>

000008b6 <main_r>:
}

void main_r () {
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
  for(;;){

  }
     8be:	ff cf       	rjmp	.-2      	; 0x8be <main_r+0x8>

000008c0 <main>:
}

// OS_Init function
int main(void) {
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
  DDRB = 0xFF;
     8c8:	84 e2       	ldi	r24, 0x24	; 36
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	2f ef       	ldi	r18, 0xFF	; 255
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
  DDRL = 0xFF;
     8d2:	8a e0       	ldi	r24, 0x0A	; 10
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	2f ef       	ldi	r18, 0xFF	; 255
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18

  OS_Init();
     8dc:	0e 94 9a 03 	call	0x734	; 0x734 <OS_Init>
  Task_Create(Pong, 0, 0);
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	8c e2       	ldi	r24, 0x2C	; 44
     8e8:	94 e0       	ldi	r25, 0x04	; 4
     8ea:	0e 94 82 02 	call	0x504	; 0x504 <Task_Create>
  Task_Create(Ping, 0, 0);
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	8d ef       	ldi	r24, 0xFD	; 253
     8f6:	93 e0       	ldi	r25, 0x03	; 3
     8f8:	0e 94 82 02 	call	0x504	; 0x504 <Task_Create>
  OS_Start();
     8fc:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <OS_Start>
  return 0;
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <CSwitch>:
Exit_Kernel:
        /*
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     90a:	0f 92       	push	r0
     90c:	1f 92       	push	r1
     90e:	2f 92       	push	r2
     910:	3f 92       	push	r3
     912:	4f 92       	push	r4
     914:	5f 92       	push	r5
     916:	6f 92       	push	r6
     918:	7f 92       	push	r7
     91a:	8f 92       	push	r8
     91c:	9f 92       	push	r9
     91e:	af 92       	push	r10
     920:	bf 92       	push	r11
     922:	cf 92       	push	r12
     924:	df 92       	push	r13
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	2f 93       	push	r18
     930:	3f 93       	push	r19
     932:	4f 93       	push	r20
     934:	5f 93       	push	r21
     936:	6f 93       	push	r22
     938:	7f 93       	push	r23
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	af 93       	push	r26
     940:	bf 93       	push	r27
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	ef 93       	push	r30
     948:	ff 93       	push	r31
     94a:	0c b7       	in	r16, 0x3c	; 60
     94c:	ff 93       	push	r31
     94e:	0f b7       	in	r16, 0x3f	; 63
     950:	ff 93       	push	r31
        /*
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into kernel_stack_pointer.
          */
        in   r30, SPL
     952:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     954:	fe b7       	in	r31, 0x3e	; 62
        sts  kernel_stack_pointer, r30
     956:	e0 93 98 12 	sts	0x1298, r30
        sts  kernel_stack_pointer+1, r31
     95a:	f0 93 99 12 	sts	0x1299, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to current_stack_pointer.
          */
        lds  r30, current_stack_pointer
     95e:	e0 91 9a 12 	lds	r30, 0x129A
        lds  r31, current_stack_pointer+1
     962:	f0 91 9b 12 	lds	r31, 0x129B
        out  SPL, r30
     966:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     968:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     96a:	ff 91       	pop	r31
     96c:	ff bf       	out	0x3f, r31	; 63
     96e:	ff 91       	pop	r31
     970:	fc bf       	out	0x3c, r31	; 60
     972:	ff 91       	pop	r31
     974:	ef 91       	pop	r30
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	bf 91       	pop	r27
     97c:	af 91       	pop	r26
     97e:	9f 91       	pop	r25
     980:	8f 91       	pop	r24
     982:	7f 91       	pop	r23
     984:	6f 91       	pop	r22
     986:	5f 91       	pop	r21
     988:	4f 91       	pop	r20
     98a:	3f 91       	pop	r19
     98c:	2f 91       	pop	r18
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	bf 90       	pop	r11
     99c:	af 90       	pop	r10
     99e:	9f 90       	pop	r9
     9a0:	8f 90       	pop	r8
     9a2:	7f 90       	pop	r7
     9a4:	6f 90       	pop	r6
     9a6:	5f 90       	pop	r5
     9a8:	4f 90       	pop	r4
     9aa:	3f 90       	pop	r3
     9ac:	2f 90       	pop	r2
     9ae:	1f 90       	pop	r1
     9b0:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     9b2:	18 95       	reti

000009b4 <Enter_Kernel>:
Enter_Kernel:
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     9b4:	0f 92       	push	r0
     9b6:	1f 92       	push	r1
     9b8:	2f 92       	push	r2
     9ba:	3f 92       	push	r3
     9bc:	4f 92       	push	r4
     9be:	5f 92       	push	r5
     9c0:	6f 92       	push	r6
     9c2:	7f 92       	push	r7
     9c4:	8f 92       	push	r8
     9c6:	9f 92       	push	r9
     9c8:	af 92       	push	r10
     9ca:	bf 92       	push	r11
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	2f 93       	push	r18
     9da:	3f 93       	push	r19
     9dc:	4f 93       	push	r20
     9de:	5f 93       	push	r21
     9e0:	6f 93       	push	r22
     9e2:	7f 93       	push	r23
     9e4:	8f 93       	push	r24
     9e6:	9f 93       	push	r25
     9e8:	af 93       	push	r26
     9ea:	bf 93       	push	r27
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ef 93       	push	r30
     9f2:	ff 93       	push	r31
     9f4:	0c b7       	in	r16, 0x3c	; 60
     9f6:	ff 93       	push	r31
     9f8:	0f b7       	in	r16, 0x3f	; 63
     9fa:	ff 93       	push	r31
        /*
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into current_stack_pointer.
          */
        in   r30, SPL
     9fc:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     9fe:	fe b7       	in	r31, 0x3e	; 62
        sts  current_stack_pointer, r30
     a00:	e0 93 9a 12 	sts	0x129A, r30
        sts  current_stack_pointer+1, r31
     a04:	f0 93 9b 12 	sts	0x129B, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to kernel_stack_pointer.
          */
        lds  r30, kernel_stack_pointer
     a08:	e0 91 98 12 	lds	r30, 0x1298
        lds  r31, kernel_stack_pointer+1
     a0c:	f0 91 99 12 	lds	r31, 0x1299
        out  SPL, r30
     a10:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     a12:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     a14:	ff 91       	pop	r31
     a16:	ff bf       	out	0x3f, r31	; 63
     a18:	ff 91       	pop	r31
     a1a:	fc bf       	out	0x3c, r31	; 60
     a1c:	ff 91       	pop	r31
     a1e:	ef 91       	pop	r30
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	bf 91       	pop	r27
     a26:	af 91       	pop	r26
     a28:	9f 91       	pop	r25
     a2a:	8f 91       	pop	r24
     a2c:	7f 91       	pop	r23
     a2e:	6f 91       	pop	r22
     a30:	5f 91       	pop	r21
     a32:	4f 91       	pop	r20
     a34:	3f 91       	pop	r19
     a36:	2f 91       	pop	r18
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	af 90       	pop	r10
     a48:	9f 90       	pop	r9
     a4a:	8f 90       	pop	r8
     a4c:	7f 90       	pop	r7
     a4e:	6f 90       	pop	r6
     a50:	5f 90       	pop	r5
     a52:	4f 90       	pop	r4
     a54:	3f 90       	pop	r3
     a56:	2f 90       	pop	r2
     a58:	1f 90       	pop	r1
     a5a:	0f 90       	pop	r0
        /*
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     a5c:	08 95       	ret

00000a5e <vfprintf>:
     a5e:	6f 92       	push	r6
     a60:	7f 92       	push	r7
     a62:	9f 92       	push	r9
     a64:	af 92       	push	r10
     a66:	bf 92       	push	r11
     a68:	cf 92       	push	r12
     a6a:	df 92       	push	r13
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	2c 97       	sbiw	r28, 0x0c	; 12
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	8c 01       	movw	r16, r24
     a8a:	7b 01       	movw	r14, r22
     a8c:	3a 01       	movw	r6, r20
     a8e:	fc 01       	movw	r30, r24
     a90:	17 82       	std	Z+7, r1	; 0x07
     a92:	16 82       	std	Z+6, r1	; 0x06
     a94:	83 81       	ldd	r24, Z+3	; 0x03
     a96:	81 ff       	sbrs	r24, 1
     a98:	19 c1       	rjmp	.+562    	; 0xccc <vfprintf+0x26e>
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	5c 01       	movw	r10, r24
     aa0:	f8 01       	movw	r30, r16
     aa2:	d3 80       	ldd	r13, Z+3	; 0x03
     aa4:	f7 01       	movw	r30, r14
     aa6:	d3 fc       	sbrc	r13, 3
     aa8:	25 91       	lpm	r18, Z+
     aaa:	d3 fe       	sbrs	r13, 3
     aac:	21 91       	ld	r18, Z+
     aae:	7f 01       	movw	r14, r30
     ab0:	22 23       	and	r18, r18
     ab2:	09 f4       	brne	.+2      	; 0xab6 <vfprintf+0x58>
     ab4:	07 c1       	rjmp	.+526    	; 0xcc4 <vfprintf+0x266>
     ab6:	25 32       	cpi	r18, 0x25	; 37
     ab8:	49 f4       	brne	.+18     	; 0xacc <vfprintf+0x6e>
     aba:	d3 fc       	sbrc	r13, 3
     abc:	25 91       	lpm	r18, Z+
     abe:	d3 fe       	sbrs	r13, 3
     ac0:	21 91       	ld	r18, Z+
     ac2:	7f 01       	movw	r14, r30
     ac4:	25 32       	cpi	r18, 0x25	; 37
     ac6:	11 f0       	breq	.+4      	; 0xacc <vfprintf+0x6e>
     ac8:	91 2c       	mov	r9, r1
     aca:	1b c0       	rjmp	.+54     	; 0xb02 <vfprintf+0xa4>
     acc:	b8 01       	movw	r22, r16
     ace:	82 2f       	mov	r24, r18
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <fputc>
     ad6:	63 01       	movw	r12, r6
     ad8:	36 01       	movw	r6, r12
     ada:	e2 cf       	rjmp	.-60     	; 0xaa0 <vfprintf+0x42>
     adc:	22 23       	and	r18, r18
     ade:	09 f4       	brne	.+2      	; 0xae2 <vfprintf+0x84>
     ae0:	f1 c0       	rjmp	.+482    	; 0xcc4 <vfprintf+0x266>
     ae2:	62 2f       	mov	r22, r18
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	87 ef       	ldi	r24, 0xF7	; 247
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	2c 87       	std	Y+12, r18	; 0x0c
     aec:	0e 94 84 08 	call	0x1108	; 0x1108 <strchr_P>
     af0:	2c 85       	ldd	r18, Y+12	; 0x0c
     af2:	89 2b       	or	r24, r25
     af4:	49 f0       	breq	.+18     	; 0xb08 <vfprintf+0xaa>
     af6:	f7 01       	movw	r30, r14
     af8:	d3 fc       	sbrc	r13, 3
     afa:	25 91       	lpm	r18, Z+
     afc:	d3 fe       	sbrs	r13, 3
     afe:	21 91       	ld	r18, Z+
     b00:	7f 01       	movw	r14, r30
     b02:	97 fe       	sbrs	r9, 7
     b04:	eb cf       	rjmp	.-42     	; 0xadc <vfprintf+0x7e>
     b06:	0c c0       	rjmp	.+24     	; 0xb20 <vfprintf+0xc2>
     b08:	23 32       	cpi	r18, 0x23	; 35
     b0a:	21 f4       	brne	.+8      	; 0xb14 <vfprintf+0xb6>
     b0c:	f9 2d       	mov	r31, r9
     b0e:	f0 61       	ori	r31, 0x10	; 16
     b10:	9f 2e       	mov	r9, r31
     b12:	f1 cf       	rjmp	.-30     	; 0xaf6 <vfprintf+0x98>
     b14:	2c 36       	cpi	r18, 0x6C	; 108
     b16:	39 f4       	brne	.+14     	; 0xb26 <vfprintf+0xc8>
     b18:	29 2d       	mov	r18, r9
     b1a:	20 68       	ori	r18, 0x80	; 128
     b1c:	92 2e       	mov	r9, r18
     b1e:	eb cf       	rjmp	.-42     	; 0xaf6 <vfprintf+0x98>
     b20:	22 23       	and	r18, r18
     b22:	09 f4       	brne	.+2      	; 0xb26 <vfprintf+0xc8>
     b24:	cf c0       	rjmp	.+414    	; 0xcc4 <vfprintf+0x266>
     b26:	62 2f       	mov	r22, r18
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	80 ef       	ldi	r24, 0xF0	; 240
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	2c 87       	std	Y+12, r18	; 0x0c
     b30:	0e 94 84 08 	call	0x1108	; 0x1108 <strchr_P>
     b34:	2c 85       	ldd	r18, Y+12	; 0x0c
     b36:	89 2b       	or	r24, r25
     b38:	41 f0       	breq	.+16     	; 0xb4a <vfprintf+0xec>
     b3a:	63 01       	movw	r12, r6
     b3c:	f4 e0       	ldi	r31, 0x04	; 4
     b3e:	cf 0e       	add	r12, r31
     b40:	d1 1c       	adc	r13, r1
     b42:	b8 01       	movw	r22, r16
     b44:	8f e3       	ldi	r24, 0x3F	; 63
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	12 c0       	rjmp	.+36     	; 0xb6e <vfprintf+0x110>
     b4a:	23 36       	cpi	r18, 0x63	; 99
     b4c:	41 f0       	breq	.+16     	; 0xb5e <vfprintf+0x100>
     b4e:	23 37       	cpi	r18, 0x73	; 115
     b50:	89 f0       	breq	.+34     	; 0xb74 <vfprintf+0x116>
     b52:	23 35       	cpi	r18, 0x53	; 83
     b54:	21 f5       	brne	.+72     	; 0xb9e <vfprintf+0x140>
     b56:	f9 2d       	mov	r31, r9
     b58:	f1 60       	ori	r31, 0x01	; 1
     b5a:	9f 2e       	mov	r9, r31
     b5c:	0b c0       	rjmp	.+22     	; 0xb74 <vfprintf+0x116>
     b5e:	63 01       	movw	r12, r6
     b60:	22 e0       	ldi	r18, 0x02	; 2
     b62:	c2 0e       	add	r12, r18
     b64:	d1 1c       	adc	r13, r1
     b66:	b8 01       	movw	r22, r16
     b68:	f3 01       	movw	r30, r6
     b6a:	80 81       	ld	r24, Z
     b6c:	91 81       	ldd	r25, Z+1	; 0x01
     b6e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <fputc>
     b72:	b2 cf       	rjmp	.-156    	; 0xad8 <vfprintf+0x7a>
     b74:	63 01       	movw	r12, r6
     b76:	22 e0       	ldi	r18, 0x02	; 2
     b78:	c2 0e       	add	r12, r18
     b7a:	d1 1c       	adc	r13, r1
     b7c:	f3 01       	movw	r30, r6
     b7e:	60 80       	ld	r6, Z
     b80:	71 80       	ldd	r7, Z+1	; 0x01
     b82:	f3 01       	movw	r30, r6
     b84:	90 fc       	sbrc	r9, 0
     b86:	85 91       	lpm	r24, Z+
     b88:	90 fe       	sbrs	r9, 0
     b8a:	81 91       	ld	r24, Z+
     b8c:	3f 01       	movw	r6, r30
     b8e:	88 23       	and	r24, r24
     b90:	09 f4       	brne	.+2      	; 0xb94 <vfprintf+0x136>
     b92:	a2 cf       	rjmp	.-188    	; 0xad8 <vfprintf+0x7a>
     b94:	b8 01       	movw	r22, r16
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <fputc>
     b9c:	f2 cf       	rjmp	.-28     	; 0xb82 <vfprintf+0x124>
     b9e:	24 36       	cpi	r18, 0x64	; 100
     ba0:	11 f0       	breq	.+4      	; 0xba6 <vfprintf+0x148>
     ba2:	29 36       	cpi	r18, 0x69	; 105
     ba4:	39 f5       	brne	.+78     	; 0xbf4 <vfprintf+0x196>
     ba6:	63 01       	movw	r12, r6
     ba8:	97 fe       	sbrs	r9, 7
     baa:	09 c0       	rjmp	.+18     	; 0xbbe <vfprintf+0x160>
     bac:	f4 e0       	ldi	r31, 0x04	; 4
     bae:	cf 0e       	add	r12, r31
     bb0:	d1 1c       	adc	r13, r1
     bb2:	f3 01       	movw	r30, r6
     bb4:	60 81       	ld	r22, Z
     bb6:	71 81       	ldd	r23, Z+1	; 0x01
     bb8:	82 81       	ldd	r24, Z+2	; 0x02
     bba:	93 81       	ldd	r25, Z+3	; 0x03
     bbc:	0a c0       	rjmp	.+20     	; 0xbd2 <vfprintf+0x174>
     bbe:	f2 e0       	ldi	r31, 0x02	; 2
     bc0:	cf 0e       	add	r12, r31
     bc2:	d1 1c       	adc	r13, r1
     bc4:	f3 01       	movw	r30, r6
     bc6:	60 81       	ld	r22, Z
     bc8:	71 81       	ldd	r23, Z+1	; 0x01
     bca:	88 27       	eor	r24, r24
     bcc:	77 fd       	sbrc	r23, 7
     bce:	80 95       	com	r24
     bd0:	98 2f       	mov	r25, r24
     bd2:	f9 2d       	mov	r31, r9
     bd4:	ff 7e       	andi	r31, 0xEF	; 239
     bd6:	9f 2e       	mov	r9, r31
     bd8:	97 ff       	sbrs	r25, 7
     bda:	09 c0       	rjmp	.+18     	; 0xbee <vfprintf+0x190>
     bdc:	90 95       	com	r25
     bde:	80 95       	com	r24
     be0:	70 95       	com	r23
     be2:	61 95       	neg	r22
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	8f 4f       	sbci	r24, 0xFF	; 255
     be8:	9f 4f       	sbci	r25, 0xFF	; 255
     bea:	f0 64       	ori	r31, 0x40	; 64
     bec:	9f 2e       	mov	r9, r31
     bee:	2a e0       	ldi	r18, 0x0A	; 10
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	38 c0       	rjmp	.+112    	; 0xc64 <vfprintf+0x206>
     bf4:	20 37       	cpi	r18, 0x70	; 112
     bf6:	a1 f0       	breq	.+40     	; 0xc20 <vfprintf+0x1c2>
     bf8:	40 f4       	brcc	.+16     	; 0xc0a <vfprintf+0x1ac>
     bfa:	28 35       	cpi	r18, 0x58	; 88
     bfc:	d1 f0       	breq	.+52     	; 0xc32 <vfprintf+0x1d4>
     bfe:	2f 36       	cpi	r18, 0x6F	; 111
     c00:	09 f0       	breq	.+2      	; 0xc04 <vfprintf+0x1a6>
     c02:	60 c0       	rjmp	.+192    	; 0xcc4 <vfprintf+0x266>
     c04:	28 e0       	ldi	r18, 0x08	; 8
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	19 c0       	rjmp	.+50     	; 0xc3c <vfprintf+0x1de>
     c0a:	25 37       	cpi	r18, 0x75	; 117
     c0c:	19 f0       	breq	.+6      	; 0xc14 <vfprintf+0x1b6>
     c0e:	28 37       	cpi	r18, 0x78	; 120
     c10:	51 f0       	breq	.+20     	; 0xc26 <vfprintf+0x1c8>
     c12:	58 c0       	rjmp	.+176    	; 0xcc4 <vfprintf+0x266>
     c14:	29 2d       	mov	r18, r9
     c16:	2f 7e       	andi	r18, 0xEF	; 239
     c18:	92 2e       	mov	r9, r18
     c1a:	2a e0       	ldi	r18, 0x0A	; 10
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	0e c0       	rjmp	.+28     	; 0xc3c <vfprintf+0x1de>
     c20:	89 2d       	mov	r24, r9
     c22:	80 61       	ori	r24, 0x10	; 16
     c24:	98 2e       	mov	r9, r24
     c26:	99 2d       	mov	r25, r9
     c28:	94 62       	ori	r25, 0x24	; 36
     c2a:	99 2e       	mov	r9, r25
     c2c:	20 e1       	ldi	r18, 0x10	; 16
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	05 c0       	rjmp	.+10     	; 0xc3c <vfprintf+0x1de>
     c32:	e9 2d       	mov	r30, r9
     c34:	e4 60       	ori	r30, 0x04	; 4
     c36:	9e 2e       	mov	r9, r30
     c38:	20 e1       	ldi	r18, 0x10	; 16
     c3a:	32 e0       	ldi	r19, 0x02	; 2
     c3c:	63 01       	movw	r12, r6
     c3e:	97 fe       	sbrs	r9, 7
     c40:	09 c0       	rjmp	.+18     	; 0xc54 <vfprintf+0x1f6>
     c42:	f4 e0       	ldi	r31, 0x04	; 4
     c44:	cf 0e       	add	r12, r31
     c46:	d1 1c       	adc	r13, r1
     c48:	f3 01       	movw	r30, r6
     c4a:	60 81       	ld	r22, Z
     c4c:	71 81       	ldd	r23, Z+1	; 0x01
     c4e:	82 81       	ldd	r24, Z+2	; 0x02
     c50:	93 81       	ldd	r25, Z+3	; 0x03
     c52:	08 c0       	rjmp	.+16     	; 0xc64 <vfprintf+0x206>
     c54:	f2 e0       	ldi	r31, 0x02	; 2
     c56:	cf 0e       	add	r12, r31
     c58:	d1 1c       	adc	r13, r1
     c5a:	f3 01       	movw	r30, r6
     c5c:	60 81       	ld	r22, Z
     c5e:	71 81       	ldd	r23, Z+1	; 0x01
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	a5 01       	movw	r20, r10
     c66:	0e 94 1f 09 	call	0x123e	; 0x123e <__ultoa_invert>
     c6a:	78 2e       	mov	r7, r24
     c6c:	7a 18       	sub	r7, r10
     c6e:	96 fe       	sbrs	r9, 6
     c70:	05 c0       	rjmp	.+10     	; 0xc7c <vfprintf+0x21e>
     c72:	b8 01       	movw	r22, r16
     c74:	8d e2       	ldi	r24, 0x2D	; 45
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <fputc>
     c7c:	94 fe       	sbrs	r9, 4
     c7e:	16 c0       	rjmp	.+44     	; 0xcac <vfprintf+0x24e>
     c80:	fe 01       	movw	r30, r28
     c82:	e7 0d       	add	r30, r7
     c84:	f1 1d       	adc	r31, r1
     c86:	80 81       	ld	r24, Z
     c88:	80 33       	cpi	r24, 0x30	; 48
     c8a:	81 f0       	breq	.+32     	; 0xcac <vfprintf+0x24e>
     c8c:	b8 01       	movw	r22, r16
     c8e:	80 e3       	ldi	r24, 0x30	; 48
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <fputc>
     c96:	92 fe       	sbrs	r9, 2
     c98:	09 c0       	rjmp	.+18     	; 0xcac <vfprintf+0x24e>
     c9a:	29 2d       	mov	r18, r9
     c9c:	20 72       	andi	r18, 0x20	; 32
     c9e:	82 2f       	mov	r24, r18
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	b8 01       	movw	r22, r16
     ca4:	88 5a       	subi	r24, 0xA8	; 168
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <fputc>
     cac:	7a 94       	dec	r7
     cae:	f5 01       	movw	r30, r10
     cb0:	e7 0d       	add	r30, r7
     cb2:	f1 1d       	adc	r31, r1
     cb4:	80 81       	ld	r24, Z
     cb6:	b8 01       	movw	r22, r16
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <fputc>
     cbe:	71 10       	cpse	r7, r1
     cc0:	f5 cf       	rjmp	.-22     	; 0xcac <vfprintf+0x24e>
     cc2:	0a cf       	rjmp	.-492    	; 0xad8 <vfprintf+0x7a>
     cc4:	f8 01       	movw	r30, r16
     cc6:	86 81       	ldd	r24, Z+6	; 0x06
     cc8:	97 81       	ldd	r25, Z+7	; 0x07
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <vfprintf+0x272>
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	9f ef       	ldi	r25, 0xFF	; 255
     cd0:	2c 96       	adiw	r28, 0x0c	; 12
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	9f 90       	pop	r9
     cf2:	7f 90       	pop	r7
     cf4:	6f 90       	pop	r6
     cf6:	08 95       	ret

00000cf8 <putval>:
     cf8:	20 fd       	sbrc	r18, 0
     cfa:	09 c0       	rjmp	.+18     	; 0xd0e <putval+0x16>
     cfc:	fc 01       	movw	r30, r24
     cfe:	23 fd       	sbrc	r18, 3
     d00:	05 c0       	rjmp	.+10     	; 0xd0c <putval+0x14>
     d02:	22 ff       	sbrs	r18, 2
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <putval+0x12>
     d06:	73 83       	std	Z+3, r23	; 0x03
     d08:	62 83       	std	Z+2, r22	; 0x02
     d0a:	51 83       	std	Z+1, r21	; 0x01
     d0c:	40 83       	st	Z, r20
     d0e:	08 95       	ret

00000d10 <mulacc>:
     d10:	44 fd       	sbrc	r20, 4
     d12:	10 c0       	rjmp	.+32     	; 0xd34 <mulacc+0x24>
     d14:	46 fd       	sbrc	r20, 6
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <mulacc+0x28>
     d18:	db 01       	movw	r26, r22
     d1a:	fc 01       	movw	r30, r24
     d1c:	aa 0f       	add	r26, r26
     d1e:	bb 1f       	adc	r27, r27
     d20:	ee 1f       	adc	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	10 94       	com	r1
     d26:	d1 f7       	brne	.-12     	; 0xd1c <mulacc+0xc>
     d28:	6a 0f       	add	r22, r26
     d2a:	7b 1f       	adc	r23, r27
     d2c:	8e 1f       	adc	r24, r30
     d2e:	9f 1f       	adc	r25, r31
     d30:	31 e0       	ldi	r19, 0x01	; 1
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <mulacc+0x2a>
     d34:	33 e0       	ldi	r19, 0x03	; 3
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <mulacc+0x2a>
     d38:	34 e0       	ldi	r19, 0x04	; 4
     d3a:	66 0f       	add	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	88 1f       	adc	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	31 50       	subi	r19, 0x01	; 1
     d44:	d1 f7       	brne	.-12     	; 0xd3a <mulacc+0x2a>
     d46:	62 0f       	add	r22, r18
     d48:	71 1d       	adc	r23, r1
     d4a:	81 1d       	adc	r24, r1
     d4c:	91 1d       	adc	r25, r1
     d4e:	08 95       	ret

00000d50 <skip_spaces>:
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	8c 01       	movw	r16, r24
     d5a:	c8 01       	movw	r24, r16
     d5c:	0e 94 96 08 	call	0x112c	; 0x112c <fgetc>
     d60:	ec 01       	movw	r28, r24
     d62:	97 fd       	sbrc	r25, 7
     d64:	08 c0       	rjmp	.+16     	; 0xd76 <skip_spaces+0x26>
     d66:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <isspace>
     d6a:	89 2b       	or	r24, r25
     d6c:	b1 f7       	brne	.-20     	; 0xd5a <skip_spaces+0xa>
     d6e:	b8 01       	movw	r22, r16
     d70:	ce 01       	movw	r24, r28
     d72:	0e 94 06 09 	call	0x120c	; 0x120c <ungetc>
     d76:	ce 01       	movw	r24, r28
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	08 95       	ret

00000d82 <conv_int>:
     d82:	8f 92       	push	r8
     d84:	9f 92       	push	r9
     d86:	af 92       	push	r10
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	ec 01       	movw	r28, r24
     d9a:	a6 2e       	mov	r10, r22
     d9c:	4a 01       	movw	r8, r20
     d9e:	02 2f       	mov	r16, r18
     da0:	0e 94 96 08 	call	0x112c	; 0x112c <fgetc>
     da4:	ac 01       	movw	r20, r24
     da6:	55 27       	eor	r21, r21
     da8:	4b 32       	cpi	r20, 0x2B	; 43
     daa:	51 05       	cpc	r21, r1
     dac:	21 f0       	breq	.+8      	; 0xdb6 <conv_int+0x34>
     dae:	4d 32       	cpi	r20, 0x2D	; 45
     db0:	51 05       	cpc	r21, r1
     db2:	51 f4       	brne	.+20     	; 0xdc8 <conv_int+0x46>
     db4:	00 68       	ori	r16, 0x80	; 128
     db6:	aa 94       	dec	r10
     db8:	11 f4       	brne	.+4      	; 0xdbe <conv_int+0x3c>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	67 c0       	rjmp	.+206    	; 0xe8c <conv_int+0x10a>
     dbe:	ce 01       	movw	r24, r28
     dc0:	0e 94 96 08 	call	0x112c	; 0x112c <fgetc>
     dc4:	97 fd       	sbrc	r25, 7
     dc6:	f9 cf       	rjmp	.-14     	; 0xdba <conv_int+0x38>
     dc8:	10 2f       	mov	r17, r16
     dca:	1d 7f       	andi	r17, 0xFD	; 253
     dcc:	30 2f       	mov	r19, r16
     dce:	30 73       	andi	r19, 0x30	; 48
     dd0:	01 f5       	brne	.+64     	; 0xe12 <conv_int+0x90>
     dd2:	80 33       	cpi	r24, 0x30	; 48
     dd4:	f1 f4       	brne	.+60     	; 0xe12 <conv_int+0x90>
     dd6:	ff 24       	eor	r15, r15
     dd8:	fa 94       	dec	r15
     dda:	fa 0c       	add	r15, r10
     ddc:	09 f4       	brne	.+2      	; 0xde0 <conv_int+0x5e>
     dde:	42 c0       	rjmp	.+132    	; 0xe64 <conv_int+0xe2>
     de0:	ce 01       	movw	r24, r28
     de2:	0e 94 96 08 	call	0x112c	; 0x112c <fgetc>
     de6:	97 fd       	sbrc	r25, 7
     de8:	3d c0       	rjmp	.+122    	; 0xe64 <conv_int+0xe2>
     dea:	38 2f       	mov	r19, r24
     dec:	3f 7d       	andi	r19, 0xDF	; 223
     dee:	38 35       	cpi	r19, 0x58	; 88
     df0:	51 f4       	brne	.+20     	; 0xe06 <conv_int+0x84>
     df2:	12 64       	ori	r17, 0x42	; 66
     df4:	aa 94       	dec	r10
     df6:	aa 94       	dec	r10
     df8:	a9 f1       	breq	.+106    	; 0xe64 <conv_int+0xe2>
     dfa:	ce 01       	movw	r24, r28
     dfc:	0e 94 96 08 	call	0x112c	; 0x112c <fgetc>
     e00:	97 ff       	sbrs	r25, 7
     e02:	07 c0       	rjmp	.+14     	; 0xe12 <conv_int+0x90>
     e04:	2f c0       	rjmp	.+94     	; 0xe64 <conv_int+0xe2>
     e06:	06 ff       	sbrs	r16, 6
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <conv_int+0x8c>
     e0a:	12 60       	ori	r17, 0x02	; 2
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <conv_int+0x8e>
     e0e:	12 61       	ori	r17, 0x12	; 18
     e10:	af 2c       	mov	r10, r15
     e12:	c1 2c       	mov	r12, r1
     e14:	d1 2c       	mov	r13, r1
     e16:	76 01       	movw	r14, r12
     e18:	20 ed       	ldi	r18, 0xD0	; 208
     e1a:	28 0f       	add	r18, r24
     e1c:	28 30       	cpi	r18, 0x08	; 8
     e1e:	80 f0       	brcs	.+32     	; 0xe40 <conv_int+0xbe>
     e20:	14 ff       	sbrs	r17, 4
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <conv_int+0xaa>
     e24:	be 01       	movw	r22, r28
     e26:	0e 94 06 09 	call	0x120c	; 0x120c <ungetc>
     e2a:	19 c0       	rjmp	.+50     	; 0xe5e <conv_int+0xdc>
     e2c:	2a 30       	cpi	r18, 0x0A	; 10
     e2e:	40 f0       	brcs	.+16     	; 0xe40 <conv_int+0xbe>
     e30:	16 ff       	sbrs	r17, 6
     e32:	f8 cf       	rjmp	.-16     	; 0xe24 <conv_int+0xa2>
     e34:	2f 7d       	andi	r18, 0xDF	; 223
     e36:	3f ee       	ldi	r19, 0xEF	; 239
     e38:	32 0f       	add	r19, r18
     e3a:	36 30       	cpi	r19, 0x06	; 6
     e3c:	98 f7       	brcc	.-26     	; 0xe24 <conv_int+0xa2>
     e3e:	27 50       	subi	r18, 0x07	; 7
     e40:	41 2f       	mov	r20, r17
     e42:	c7 01       	movw	r24, r14
     e44:	b6 01       	movw	r22, r12
     e46:	0e 94 88 06 	call	0xd10	; 0xd10 <mulacc>
     e4a:	6b 01       	movw	r12, r22
     e4c:	7c 01       	movw	r14, r24
     e4e:	12 60       	ori	r17, 0x02	; 2
     e50:	aa 94       	dec	r10
     e52:	59 f0       	breq	.+22     	; 0xe6a <conv_int+0xe8>
     e54:	ce 01       	movw	r24, r28
     e56:	0e 94 96 08 	call	0x112c	; 0x112c <fgetc>
     e5a:	97 ff       	sbrs	r25, 7
     e5c:	dd cf       	rjmp	.-70     	; 0xe18 <conv_int+0x96>
     e5e:	11 fd       	sbrc	r17, 1
     e60:	04 c0       	rjmp	.+8      	; 0xe6a <conv_int+0xe8>
     e62:	ab cf       	rjmp	.-170    	; 0xdba <conv_int+0x38>
     e64:	c1 2c       	mov	r12, r1
     e66:	d1 2c       	mov	r13, r1
     e68:	76 01       	movw	r14, r12
     e6a:	17 ff       	sbrs	r17, 7
     e6c:	08 c0       	rjmp	.+16     	; 0xe7e <conv_int+0xfc>
     e6e:	f0 94       	com	r15
     e70:	e0 94       	com	r14
     e72:	d0 94       	com	r13
     e74:	c0 94       	com	r12
     e76:	c1 1c       	adc	r12, r1
     e78:	d1 1c       	adc	r13, r1
     e7a:	e1 1c       	adc	r14, r1
     e7c:	f1 1c       	adc	r15, r1
     e7e:	21 2f       	mov	r18, r17
     e80:	b7 01       	movw	r22, r14
     e82:	a6 01       	movw	r20, r12
     e84:	c4 01       	movw	r24, r8
     e86:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <putval>
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	af 90       	pop	r10
     e9e:	9f 90       	pop	r9
     ea0:	8f 90       	pop	r8
     ea2:	08 95       	ret

00000ea4 <vfscanf>:
     ea4:	4f 92       	push	r4
     ea6:	5f 92       	push	r5
     ea8:	7f 92       	push	r7
     eaa:	8f 92       	push	r8
     eac:	9f 92       	push	r9
     eae:	af 92       	push	r10
     eb0:	bf 92       	push	r11
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	1f 92       	push	r1
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	8c 01       	movw	r16, r24
     eca:	2b 01       	movw	r4, r22
     ecc:	7a 01       	movw	r14, r20
     ece:	fc 01       	movw	r30, r24
     ed0:	17 82       	std	Z+7, r1	; 0x07
     ed2:	16 82       	std	Z+6, r1	; 0x06
     ed4:	a1 2c       	mov	r10, r1
     ed6:	f8 01       	movw	r30, r16
     ed8:	d3 80       	ldd	r13, Z+3	; 0x03
     eda:	f2 01       	movw	r30, r4
     edc:	d3 fc       	sbrc	r13, 3
     ede:	85 91       	lpm	r24, Z+
     ee0:	d3 fe       	sbrs	r13, 3
     ee2:	81 91       	ld	r24, Z+
     ee4:	38 2f       	mov	r19, r24
     ee6:	2f 01       	movw	r4, r30
     ee8:	88 23       	and	r24, r24
     eea:	09 f4       	brne	.+2      	; 0xeee <vfscanf+0x4a>
     eec:	ef c0       	rjmp	.+478    	; 0x10cc <vfscanf+0x228>
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	39 83       	std	Y+1, r19	; 0x01
     ef2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <isspace>
     ef6:	39 81       	ldd	r19, Y+1	; 0x01
     ef8:	89 2b       	or	r24, r25
     efa:	21 f0       	breq	.+8      	; 0xf04 <vfscanf+0x60>
     efc:	c8 01       	movw	r24, r16
     efe:	0e 94 a8 06 	call	0xd50	; 0xd50 <skip_spaces>
     f02:	e9 cf       	rjmp	.-46     	; 0xed6 <vfscanf+0x32>
     f04:	35 32       	cpi	r19, 0x25	; 37
     f06:	41 f4       	brne	.+16     	; 0xf18 <vfscanf+0x74>
     f08:	f2 01       	movw	r30, r4
     f0a:	d3 fc       	sbrc	r13, 3
     f0c:	35 91       	lpm	r19, Z+
     f0e:	d3 fe       	sbrs	r13, 3
     f10:	31 91       	ld	r19, Z+
     f12:	2f 01       	movw	r4, r30
     f14:	35 32       	cpi	r19, 0x25	; 37
     f16:	69 f4       	brne	.+26     	; 0xf32 <vfscanf+0x8e>
     f18:	c8 01       	movw	r24, r16
     f1a:	39 83       	std	Y+1, r19	; 0x01
     f1c:	0e 94 96 08 	call	0x112c	; 0x112c <fgetc>
     f20:	39 81       	ldd	r19, Y+1	; 0x01
     f22:	97 fd       	sbrc	r25, 7
     f24:	d1 c0       	rjmp	.+418    	; 0x10c8 <vfscanf+0x224>
     f26:	38 17       	cp	r19, r24
     f28:	b1 f2       	breq	.-84     	; 0xed6 <vfscanf+0x32>
     f2a:	b8 01       	movw	r22, r16
     f2c:	0e 94 06 09 	call	0x120c	; 0x120c <ungetc>
     f30:	cd c0       	rjmp	.+410    	; 0x10cc <vfscanf+0x228>
     f32:	3a 32       	cpi	r19, 0x2A	; 42
     f34:	41 f4       	brne	.+16     	; 0xf46 <vfscanf+0xa2>
     f36:	d3 fc       	sbrc	r13, 3
     f38:	35 91       	lpm	r19, Z+
     f3a:	d3 fe       	sbrs	r13, 3
     f3c:	31 91       	ld	r19, Z+
     f3e:	2f 01       	movw	r4, r30
     f40:	bb 24       	eor	r11, r11
     f42:	b3 94       	inc	r11
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <vfscanf+0xa4>
     f46:	b1 2c       	mov	r11, r1
     f48:	71 2c       	mov	r7, r1
     f4a:	20 ed       	ldi	r18, 0xD0	; 208
     f4c:	23 0f       	add	r18, r19
     f4e:	2a 30       	cpi	r18, 0x0A	; 10
     f50:	90 f4       	brcc	.+36     	; 0xf76 <vfscanf+0xd2>
     f52:	fb 2d       	mov	r31, r11
     f54:	f2 60       	ori	r31, 0x02	; 2
     f56:	bf 2e       	mov	r11, r31
     f58:	67 2d       	mov	r22, r7
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	40 e2       	ldi	r20, 0x20	; 32
     f62:	0e 94 88 06 	call	0xd10	; 0xd10 <mulacc>
     f66:	76 2e       	mov	r7, r22
     f68:	f2 01       	movw	r30, r4
     f6a:	d3 fc       	sbrc	r13, 3
     f6c:	35 91       	lpm	r19, Z+
     f6e:	d3 fe       	sbrs	r13, 3
     f70:	31 91       	ld	r19, Z+
     f72:	2f 01       	movw	r4, r30
     f74:	ea cf       	rjmp	.-44     	; 0xf4a <vfscanf+0xa6>
     f76:	b1 fe       	sbrs	r11, 1
     f78:	03 c0       	rjmp	.+6      	; 0xf80 <vfscanf+0xdc>
     f7a:	71 10       	cpse	r7, r1
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <vfscanf+0xe0>
     f7e:	a6 c0       	rjmp	.+332    	; 0x10cc <vfscanf+0x228>
     f80:	77 24       	eor	r7, r7
     f82:	7a 94       	dec	r7
     f84:	38 36       	cpi	r19, 0x68	; 104
     f86:	19 f0       	breq	.+6      	; 0xf8e <vfscanf+0xea>
     f88:	3c 36       	cpi	r19, 0x6C	; 108
     f8a:	61 f0       	breq	.+24     	; 0xfa4 <vfscanf+0x100>
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <vfscanf+0x112>
     f8e:	f2 01       	movw	r30, r4
     f90:	d3 fc       	sbrc	r13, 3
     f92:	35 91       	lpm	r19, Z+
     f94:	d3 fe       	sbrs	r13, 3
     f96:	31 91       	ld	r19, Z+
     f98:	2f 01       	movw	r4, r30
     f9a:	38 36       	cpi	r19, 0x68	; 104
     f9c:	61 f4       	brne	.+24     	; 0xfb6 <vfscanf+0x112>
     f9e:	fb 2d       	mov	r31, r11
     fa0:	f8 60       	ori	r31, 0x08	; 8
     fa2:	bf 2e       	mov	r11, r31
     fa4:	8b 2d       	mov	r24, r11
     fa6:	84 60       	ori	r24, 0x04	; 4
     fa8:	b8 2e       	mov	r11, r24
     faa:	f2 01       	movw	r30, r4
     fac:	d3 fc       	sbrc	r13, 3
     fae:	35 91       	lpm	r19, Z+
     fb0:	d3 fe       	sbrs	r13, 3
     fb2:	31 91       	ld	r19, Z+
     fb4:	2f 01       	movw	r4, r30
     fb6:	33 23       	and	r19, r19
     fb8:	09 f4       	brne	.+2      	; 0xfbc <vfscanf+0x118>
     fba:	88 c0       	rjmp	.+272    	; 0x10cc <vfscanf+0x228>
     fbc:	63 2f       	mov	r22, r19
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	87 e0       	ldi	r24, 0x07	; 7
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	39 83       	std	Y+1, r19	; 0x01
     fc6:	0e 94 84 08 	call	0x1108	; 0x1108 <strchr_P>
     fca:	39 81       	ldd	r19, Y+1	; 0x01
     fcc:	89 2b       	or	r24, r25
     fce:	09 f4       	brne	.+2      	; 0xfd2 <vfscanf+0x12e>
     fd0:	7d c0       	rjmp	.+250    	; 0x10cc <vfscanf+0x228>
     fd2:	b0 fc       	sbrc	r11, 0
     fd4:	07 c0       	rjmp	.+14     	; 0xfe4 <vfscanf+0x140>
     fd6:	f7 01       	movw	r30, r14
     fd8:	c0 80       	ld	r12, Z
     fda:	d1 80       	ldd	r13, Z+1	; 0x01
     fdc:	c7 01       	movw	r24, r14
     fde:	02 96       	adiw	r24, 0x02	; 2
     fe0:	7c 01       	movw	r14, r24
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <vfscanf+0x144>
     fe4:	c1 2c       	mov	r12, r1
     fe6:	d1 2c       	mov	r13, r1
     fe8:	3e 36       	cpi	r19, 0x6E	; 110
     fea:	51 f4       	brne	.+20     	; 0x1000 <vfscanf+0x15c>
     fec:	f8 01       	movw	r30, r16
     fee:	46 81       	ldd	r20, Z+6	; 0x06
     ff0:	57 81       	ldd	r21, Z+7	; 0x07
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	2b 2d       	mov	r18, r11
     ff8:	c6 01       	movw	r24, r12
     ffa:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <putval>
     ffe:	6b cf       	rjmp	.-298    	; 0xed6 <vfscanf+0x32>
    1000:	33 36       	cpi	r19, 0x63	; 99
    1002:	a1 f4       	brne	.+40     	; 0x102c <vfscanf+0x188>
    1004:	b1 fc       	sbrc	r11, 1
    1006:	02 c0       	rjmp	.+4      	; 0x100c <vfscanf+0x168>
    1008:	77 24       	eor	r7, r7
    100a:	73 94       	inc	r7
    100c:	c8 01       	movw	r24, r16
    100e:	0e 94 96 08 	call	0x112c	; 0x112c <fgetc>
    1012:	97 fd       	sbrc	r25, 7
    1014:	59 c0       	rjmp	.+178    	; 0x10c8 <vfscanf+0x224>
    1016:	c1 14       	cp	r12, r1
    1018:	d1 04       	cpc	r13, r1
    101a:	29 f0       	breq	.+10     	; 0x1026 <vfscanf+0x182>
    101c:	f6 01       	movw	r30, r12
    101e:	80 83       	st	Z, r24
    1020:	c6 01       	movw	r24, r12
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	6c 01       	movw	r12, r24
    1026:	7a 94       	dec	r7
    1028:	89 f7       	brne	.-30     	; 0x100c <vfscanf+0x168>
    102a:	4a c0       	rjmp	.+148    	; 0x10c0 <vfscanf+0x21c>
    102c:	c8 01       	movw	r24, r16
    102e:	39 83       	std	Y+1, r19	; 0x01
    1030:	0e 94 a8 06 	call	0xd50	; 0xd50 <skip_spaces>
    1034:	39 81       	ldd	r19, Y+1	; 0x01
    1036:	97 fd       	sbrc	r25, 7
    1038:	47 c0       	rjmp	.+142    	; 0x10c8 <vfscanf+0x224>
    103a:	3f 36       	cpi	r19, 0x6F	; 111
    103c:	69 f1       	breq	.+90     	; 0x1098 <vfscanf+0x1f4>
    103e:	28 f4       	brcc	.+10     	; 0x104a <vfscanf+0x1a6>
    1040:	34 36       	cpi	r19, 0x64	; 100
    1042:	31 f1       	breq	.+76     	; 0x1090 <vfscanf+0x1ec>
    1044:	39 36       	cpi	r19, 0x69	; 105
    1046:	79 f1       	breq	.+94     	; 0x10a6 <vfscanf+0x202>
    1048:	2b c0       	rjmp	.+86     	; 0x10a0 <vfscanf+0x1fc>
    104a:	33 37       	cpi	r19, 0x73	; 115
    104c:	69 f0       	breq	.+26     	; 0x1068 <vfscanf+0x1c4>
    104e:	35 37       	cpi	r19, 0x75	; 117
    1050:	f9 f0       	breq	.+62     	; 0x1090 <vfscanf+0x1ec>
    1052:	26 c0       	rjmp	.+76     	; 0x10a0 <vfscanf+0x1fc>
    1054:	c1 14       	cp	r12, r1
    1056:	d1 04       	cpc	r13, r1
    1058:	29 f0       	breq	.+10     	; 0x1064 <vfscanf+0x1c0>
    105a:	f6 01       	movw	r30, r12
    105c:	80 82       	st	Z, r8
    105e:	c6 01       	movw	r24, r12
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	6c 01       	movw	r12, r24
    1064:	7a 94       	dec	r7
    1066:	71 f0       	breq	.+28     	; 0x1084 <vfscanf+0x1e0>
    1068:	c8 01       	movw	r24, r16
    106a:	0e 94 96 08 	call	0x112c	; 0x112c <fgetc>
    106e:	4c 01       	movw	r8, r24
    1070:	97 fd       	sbrc	r25, 7
    1072:	08 c0       	rjmp	.+16     	; 0x1084 <vfscanf+0x1e0>
    1074:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <isspace>
    1078:	89 2b       	or	r24, r25
    107a:	61 f3       	breq	.-40     	; 0x1054 <vfscanf+0x1b0>
    107c:	b8 01       	movw	r22, r16
    107e:	c4 01       	movw	r24, r8
    1080:	0e 94 06 09 	call	0x120c	; 0x120c <ungetc>
    1084:	c1 14       	cp	r12, r1
    1086:	d1 04       	cpc	r13, r1
    1088:	d9 f0       	breq	.+54     	; 0x10c0 <vfscanf+0x21c>
    108a:	f6 01       	movw	r30, r12
    108c:	10 82       	st	Z, r1
    108e:	18 c0       	rjmp	.+48     	; 0x10c0 <vfscanf+0x21c>
    1090:	fb 2d       	mov	r31, r11
    1092:	f0 62       	ori	r31, 0x20	; 32
    1094:	bf 2e       	mov	r11, r31
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <vfscanf+0x202>
    1098:	8b 2d       	mov	r24, r11
    109a:	80 61       	ori	r24, 0x10	; 16
    109c:	b8 2e       	mov	r11, r24
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <vfscanf+0x202>
    10a0:	9b 2d       	mov	r25, r11
    10a2:	90 64       	ori	r25, 0x40	; 64
    10a4:	b9 2e       	mov	r11, r25
    10a6:	2b 2d       	mov	r18, r11
    10a8:	a6 01       	movw	r20, r12
    10aa:	67 2d       	mov	r22, r7
    10ac:	c8 01       	movw	r24, r16
    10ae:	0e 94 c1 06 	call	0xd82	; 0xd82 <conv_int>
    10b2:	81 11       	cpse	r24, r1
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <vfscanf+0x21c>
    10b6:	f8 01       	movw	r30, r16
    10b8:	83 81       	ldd	r24, Z+3	; 0x03
    10ba:	80 73       	andi	r24, 0x30	; 48
    10bc:	29 f4       	brne	.+10     	; 0x10c8 <vfscanf+0x224>
    10be:	06 c0       	rjmp	.+12     	; 0x10cc <vfscanf+0x228>
    10c0:	b0 fc       	sbrc	r11, 0
    10c2:	09 cf       	rjmp	.-494    	; 0xed6 <vfscanf+0x32>
    10c4:	a3 94       	inc	r10
    10c6:	07 cf       	rjmp	.-498    	; 0xed6 <vfscanf+0x32>
    10c8:	aa 20       	and	r10, r10
    10ca:	19 f0       	breq	.+6      	; 0x10d2 <vfscanf+0x22e>
    10cc:	8a 2d       	mov	r24, r10
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <vfscanf+0x232>
    10d2:	8f ef       	ldi	r24, 0xFF	; 255
    10d4:	9f ef       	ldi	r25, 0xFF	; 255
    10d6:	0f 90       	pop	r0
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	ff 90       	pop	r15
    10e2:	ef 90       	pop	r14
    10e4:	df 90       	pop	r13
    10e6:	cf 90       	pop	r12
    10e8:	bf 90       	pop	r11
    10ea:	af 90       	pop	r10
    10ec:	9f 90       	pop	r9
    10ee:	8f 90       	pop	r8
    10f0:	7f 90       	pop	r7
    10f2:	5f 90       	pop	r5
    10f4:	4f 90       	pop	r4
    10f6:	08 95       	ret

000010f8 <isspace>:
    10f8:	91 11       	cpse	r25, r1
    10fa:	ff c0       	rjmp	.+510    	; 0x12fa <__ctype_isfalse>
    10fc:	80 32       	cpi	r24, 0x20	; 32
    10fe:	19 f0       	breq	.+6      	; 0x1106 <isspace+0xe>
    1100:	89 50       	subi	r24, 0x09	; 9
    1102:	85 50       	subi	r24, 0x05	; 5
    1104:	d0 f7       	brcc	.-12     	; 0x10fa <isspace+0x2>
    1106:	08 95       	ret

00001108 <strchr_P>:
    1108:	fc 01       	movw	r30, r24
    110a:	05 90       	lpm	r0, Z+
    110c:	06 16       	cp	r0, r22
    110e:	21 f0       	breq	.+8      	; 0x1118 <strchr_P+0x10>
    1110:	00 20       	and	r0, r0
    1112:	d9 f7       	brne	.-10     	; 0x110a <strchr_P+0x2>
    1114:	c0 01       	movw	r24, r0
    1116:	08 95       	ret
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	cf 01       	movw	r24, r30
    111c:	08 95       	ret

0000111e <memset>:
    111e:	dc 01       	movw	r26, r24
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <memset+0x6>
    1122:	6d 93       	st	X+, r22
    1124:	41 50       	subi	r20, 0x01	; 1
    1126:	50 40       	sbci	r21, 0x00	; 0
    1128:	e0 f7       	brcc	.-8      	; 0x1122 <memset+0x4>
    112a:	08 95       	ret

0000112c <fgetc>:
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	ec 01       	movw	r28, r24
    1132:	2b 81       	ldd	r18, Y+3	; 0x03
    1134:	20 ff       	sbrs	r18, 0
    1136:	33 c0       	rjmp	.+102    	; 0x119e <fgetc+0x72>
    1138:	26 ff       	sbrs	r18, 6
    113a:	0a c0       	rjmp	.+20     	; 0x1150 <fgetc+0x24>
    113c:	2f 7b       	andi	r18, 0xBF	; 191
    113e:	2b 83       	std	Y+3, r18	; 0x03
    1140:	8e 81       	ldd	r24, Y+6	; 0x06
    1142:	9f 81       	ldd	r25, Y+7	; 0x07
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	9f 83       	std	Y+7, r25	; 0x07
    1148:	8e 83       	std	Y+6, r24	; 0x06
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	29 c0       	rjmp	.+82     	; 0x11a2 <fgetc+0x76>
    1150:	22 ff       	sbrs	r18, 2
    1152:	0f c0       	rjmp	.+30     	; 0x1172 <fgetc+0x46>
    1154:	e8 81       	ld	r30, Y
    1156:	f9 81       	ldd	r31, Y+1	; 0x01
    1158:	80 81       	ld	r24, Z
    115a:	99 27       	eor	r25, r25
    115c:	87 fd       	sbrc	r24, 7
    115e:	90 95       	com	r25
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	19 f4       	brne	.+6      	; 0x116a <fgetc+0x3e>
    1164:	20 62       	ori	r18, 0x20	; 32
    1166:	2b 83       	std	Y+3, r18	; 0x03
    1168:	1a c0       	rjmp	.+52     	; 0x119e <fgetc+0x72>
    116a:	31 96       	adiw	r30, 0x01	; 1
    116c:	f9 83       	std	Y+1, r31	; 0x01
    116e:	e8 83       	st	Y, r30
    1170:	0e c0       	rjmp	.+28     	; 0x118e <fgetc+0x62>
    1172:	ea 85       	ldd	r30, Y+10	; 0x0a
    1174:	fb 85       	ldd	r31, Y+11	; 0x0b
    1176:	19 95       	eicall
    1178:	97 ff       	sbrs	r25, 7
    117a:	09 c0       	rjmp	.+18     	; 0x118e <fgetc+0x62>
    117c:	2b 81       	ldd	r18, Y+3	; 0x03
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	11 f4       	brne	.+4      	; 0x1186 <fgetc+0x5a>
    1182:	80 e1       	ldi	r24, 0x10	; 16
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <fgetc+0x5c>
    1186:	80 e2       	ldi	r24, 0x20	; 32
    1188:	82 2b       	or	r24, r18
    118a:	8b 83       	std	Y+3, r24	; 0x03
    118c:	08 c0       	rjmp	.+16     	; 0x119e <fgetc+0x72>
    118e:	2e 81       	ldd	r18, Y+6	; 0x06
    1190:	3f 81       	ldd	r19, Y+7	; 0x07
    1192:	2f 5f       	subi	r18, 0xFF	; 255
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	3f 83       	std	Y+7, r19	; 0x07
    1198:	2e 83       	std	Y+6, r18	; 0x06
    119a:	99 27       	eor	r25, r25
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <fgetc+0x76>
    119e:	8f ef       	ldi	r24, 0xFF	; 255
    11a0:	9f ef       	ldi	r25, 0xFF	; 255
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	08 95       	ret

000011a8 <fputc>:
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	18 2f       	mov	r17, r24
    11b2:	09 2f       	mov	r16, r25
    11b4:	eb 01       	movw	r28, r22
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	81 fd       	sbrc	r24, 1
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <fputc+0x1a>
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	9f ef       	ldi	r25, 0xFF	; 255
    11c0:	20 c0       	rjmp	.+64     	; 0x1202 <fputc+0x5a>
    11c2:	82 ff       	sbrs	r24, 2
    11c4:	10 c0       	rjmp	.+32     	; 0x11e6 <fputc+0x3e>
    11c6:	4e 81       	ldd	r20, Y+6	; 0x06
    11c8:	5f 81       	ldd	r21, Y+7	; 0x07
    11ca:	2c 81       	ldd	r18, Y+4	; 0x04
    11cc:	3d 81       	ldd	r19, Y+5	; 0x05
    11ce:	42 17       	cp	r20, r18
    11d0:	53 07       	cpc	r21, r19
    11d2:	7c f4       	brge	.+30     	; 0x11f2 <fputc+0x4a>
    11d4:	e8 81       	ld	r30, Y
    11d6:	f9 81       	ldd	r31, Y+1	; 0x01
    11d8:	9f 01       	movw	r18, r30
    11da:	2f 5f       	subi	r18, 0xFF	; 255
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
    11de:	39 83       	std	Y+1, r19	; 0x01
    11e0:	28 83       	st	Y, r18
    11e2:	10 83       	st	Z, r17
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <fputc+0x4a>
    11e6:	e8 85       	ldd	r30, Y+8	; 0x08
    11e8:	f9 85       	ldd	r31, Y+9	; 0x09
    11ea:	81 2f       	mov	r24, r17
    11ec:	19 95       	eicall
    11ee:	89 2b       	or	r24, r25
    11f0:	29 f7       	brne	.-54     	; 0x11bc <fputc+0x14>
    11f2:	2e 81       	ldd	r18, Y+6	; 0x06
    11f4:	3f 81       	ldd	r19, Y+7	; 0x07
    11f6:	2f 5f       	subi	r18, 0xFF	; 255
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	3f 83       	std	Y+7, r19	; 0x07
    11fc:	2e 83       	std	Y+6, r18	; 0x06
    11fe:	81 2f       	mov	r24, r17
    1200:	90 2f       	mov	r25, r16
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <ungetc>:
    120c:	fb 01       	movw	r30, r22
    120e:	23 81       	ldd	r18, Z+3	; 0x03
    1210:	20 ff       	sbrs	r18, 0
    1212:	12 c0       	rjmp	.+36     	; 0x1238 <ungetc+0x2c>
    1214:	26 fd       	sbrc	r18, 6
    1216:	10 c0       	rjmp	.+32     	; 0x1238 <ungetc+0x2c>
    1218:	8f 3f       	cpi	r24, 0xFF	; 255
    121a:	3f ef       	ldi	r19, 0xFF	; 255
    121c:	93 07       	cpc	r25, r19
    121e:	61 f0       	breq	.+24     	; 0x1238 <ungetc+0x2c>
    1220:	82 83       	std	Z+2, r24	; 0x02
    1222:	2f 7d       	andi	r18, 0xDF	; 223
    1224:	20 64       	ori	r18, 0x40	; 64
    1226:	23 83       	std	Z+3, r18	; 0x03
    1228:	26 81       	ldd	r18, Z+6	; 0x06
    122a:	37 81       	ldd	r19, Z+7	; 0x07
    122c:	21 50       	subi	r18, 0x01	; 1
    122e:	31 09       	sbc	r19, r1
    1230:	37 83       	std	Z+7, r19	; 0x07
    1232:	26 83       	std	Z+6, r18	; 0x06
    1234:	99 27       	eor	r25, r25
    1236:	08 95       	ret
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	9f ef       	ldi	r25, 0xFF	; 255
    123c:	08 95       	ret

0000123e <__ultoa_invert>:
    123e:	fa 01       	movw	r30, r20
    1240:	aa 27       	eor	r26, r26
    1242:	28 30       	cpi	r18, 0x08	; 8
    1244:	51 f1       	breq	.+84     	; 0x129a <__ultoa_invert+0x5c>
    1246:	20 31       	cpi	r18, 0x10	; 16
    1248:	81 f1       	breq	.+96     	; 0x12aa <__ultoa_invert+0x6c>
    124a:	e8 94       	clt
    124c:	6f 93       	push	r22
    124e:	6e 7f       	andi	r22, 0xFE	; 254
    1250:	6e 5f       	subi	r22, 0xFE	; 254
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	8f 4f       	sbci	r24, 0xFF	; 255
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	af 4f       	sbci	r26, 0xFF	; 255
    125a:	b1 e0       	ldi	r27, 0x01	; 1
    125c:	3e d0       	rcall	.+124    	; 0x12da <__ultoa_invert+0x9c>
    125e:	b4 e0       	ldi	r27, 0x04	; 4
    1260:	3c d0       	rcall	.+120    	; 0x12da <__ultoa_invert+0x9c>
    1262:	67 0f       	add	r22, r23
    1264:	78 1f       	adc	r23, r24
    1266:	89 1f       	adc	r24, r25
    1268:	9a 1f       	adc	r25, r26
    126a:	a1 1d       	adc	r26, r1
    126c:	68 0f       	add	r22, r24
    126e:	79 1f       	adc	r23, r25
    1270:	8a 1f       	adc	r24, r26
    1272:	91 1d       	adc	r25, r1
    1274:	a1 1d       	adc	r26, r1
    1276:	6a 0f       	add	r22, r26
    1278:	71 1d       	adc	r23, r1
    127a:	81 1d       	adc	r24, r1
    127c:	91 1d       	adc	r25, r1
    127e:	a1 1d       	adc	r26, r1
    1280:	20 d0       	rcall	.+64     	; 0x12c2 <__ultoa_invert+0x84>
    1282:	09 f4       	brne	.+2      	; 0x1286 <__ultoa_invert+0x48>
    1284:	68 94       	set
    1286:	3f 91       	pop	r19
    1288:	2a e0       	ldi	r18, 0x0A	; 10
    128a:	26 9f       	mul	r18, r22
    128c:	11 24       	eor	r1, r1
    128e:	30 19       	sub	r19, r0
    1290:	30 5d       	subi	r19, 0xD0	; 208
    1292:	31 93       	st	Z+, r19
    1294:	de f6       	brtc	.-74     	; 0x124c <__ultoa_invert+0xe>
    1296:	cf 01       	movw	r24, r30
    1298:	08 95       	ret
    129a:	46 2f       	mov	r20, r22
    129c:	47 70       	andi	r20, 0x07	; 7
    129e:	40 5d       	subi	r20, 0xD0	; 208
    12a0:	41 93       	st	Z+, r20
    12a2:	b3 e0       	ldi	r27, 0x03	; 3
    12a4:	0f d0       	rcall	.+30     	; 0x12c4 <__ultoa_invert+0x86>
    12a6:	c9 f7       	brne	.-14     	; 0x129a <__ultoa_invert+0x5c>
    12a8:	f6 cf       	rjmp	.-20     	; 0x1296 <__ultoa_invert+0x58>
    12aa:	46 2f       	mov	r20, r22
    12ac:	4f 70       	andi	r20, 0x0F	; 15
    12ae:	40 5d       	subi	r20, 0xD0	; 208
    12b0:	4a 33       	cpi	r20, 0x3A	; 58
    12b2:	18 f0       	brcs	.+6      	; 0x12ba <__ultoa_invert+0x7c>
    12b4:	49 5d       	subi	r20, 0xD9	; 217
    12b6:	31 fd       	sbrc	r19, 1
    12b8:	40 52       	subi	r20, 0x20	; 32
    12ba:	41 93       	st	Z+, r20
    12bc:	02 d0       	rcall	.+4      	; 0x12c2 <__ultoa_invert+0x84>
    12be:	a9 f7       	brne	.-22     	; 0x12aa <__ultoa_invert+0x6c>
    12c0:	ea cf       	rjmp	.-44     	; 0x1296 <__ultoa_invert+0x58>
    12c2:	b4 e0       	ldi	r27, 0x04	; 4
    12c4:	a6 95       	lsr	r26
    12c6:	97 95       	ror	r25
    12c8:	87 95       	ror	r24
    12ca:	77 95       	ror	r23
    12cc:	67 95       	ror	r22
    12ce:	ba 95       	dec	r27
    12d0:	c9 f7       	brne	.-14     	; 0x12c4 <__ultoa_invert+0x86>
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	61 05       	cpc	r22, r1
    12d6:	71 05       	cpc	r23, r1
    12d8:	08 95       	ret
    12da:	9b 01       	movw	r18, r22
    12dc:	ac 01       	movw	r20, r24
    12de:	0a 2e       	mov	r0, r26
    12e0:	06 94       	lsr	r0
    12e2:	57 95       	ror	r21
    12e4:	47 95       	ror	r20
    12e6:	37 95       	ror	r19
    12e8:	27 95       	ror	r18
    12ea:	ba 95       	dec	r27
    12ec:	c9 f7       	brne	.-14     	; 0x12e0 <__ultoa_invert+0xa2>
    12ee:	62 0f       	add	r22, r18
    12f0:	73 1f       	adc	r23, r19
    12f2:	84 1f       	adc	r24, r20
    12f4:	95 1f       	adc	r25, r21
    12f6:	a0 1d       	adc	r26, r0
    12f8:	08 95       	ret

000012fa <__ctype_isfalse>:
    12fa:	99 27       	eor	r25, r25
    12fc:	88 27       	eor	r24, r24

000012fe <__ctype_istrue>:
    12fe:	08 95       	ret

00001300 <_exit>:
    1300:	f8 94       	cli

00001302 <__stop_program>:
    1302:	ff cf       	rjmp	.-2      	; 0x1302 <__stop_program>
