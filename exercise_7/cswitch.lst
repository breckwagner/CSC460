   1               	# 1 "cswitch.S"
   1               	/*
   0               	
   2               	 * Compile using:
   3               	 *   avr-gcc -c -O2 -mmcu=${CPU} -Wa,--gstabs -o switch.o switch.S
   4               	 */
   5               	
   6               	/*
   7               	  * Note:
   8               	  *
   9               	  * This code is based on "thread_swtch.S" by Brian S. Dean, and the
  10               	  * "os_cpu_a.asm" of uC/OS-II AVR Specific code by Ole Saether.
  11               	  * They are adapted to match our need of a "full-served" kernel model.
  12               	  *
  13               	  *  Author:  Dr. Mantis Cheng, 2 October 2006
  14               	  *
  15               	  *  ChangeLog: Modified by Alexander M. Hoole, October 2006.
  16               	  *
  17               	  *  !!!!!   This code has NEVER been tested.  !!!!!
  18               	  *  !!!!!   Use at your own risk  !!!!
  19               	  */
  20               	
  21               	
  22               	/* locations of well-known registers */
  23               	SREG   = 0x3F
  24               	SPH    = 0x3E
  25               	SPL    = 0x3D
  26               	EIND   = 0X3C
  27               	/*
  28               	  * MACROS
  29               	  */
  30               	;
  31               	; Push all registers and then the status register.
  32               	; It is important to keep the order of SAVECTX and RESTORECTX  exactly
  33               	; in reverse. Also, when a new process is created, it is important to
  34               	; initialize its "initial" context in the same order as SAVECTX.
  35               	;
  36               	.macro	SAVECTX
  37               		push	r0
  38               		push	r1
  39               		push	r2
  40               		push	r3
  41               		push	r4
  42               		push	r5
  43               		push	r6
  44               		push	r7
  45               		push	r8
  46               		push	r9
  47               		push	r10
  48               		push	r11
  49               		push	r12
  50               		push	r13
  51               		push	r14
  52               		push	r15
  53               		push	r16
  54               		push	r17
  55               		push	r18
  56               		push	r19
  57               		push	r20
  58               		push	r21
  59               		push	r22
  60               		push	r23
  61               		push	r24
  62               		push	r25
  63               		push	r26
  64               		push	r27
  65               		push	r28
  66               		push	r29
  67               		push	r30
  68               		push	r31
  69               	
  70               	    in r31, EIND
  71               	    push    r31
  72               	    in r31, SREG
  73               	    push    r31
  74               	.endm
  75               	;
  76               	; Pop all registers and the status registers
  77               	;
  78               	
  79               	;SREG   = 0x3F
  80               	;SPH    = 0x3E
  81               	;SPL    = 0x3D
  82               	;EIND   = 0X3C
  83               	
  84               	.macro	RESTORECTX
  85               	    pop r31
  86               	    out SREG,r31
  87               	    pop r31
  88               	    out EIND,r31
  89               	
  90               	  pop r31
  91               		pop	r30
  92               		pop	r29
  93               		pop	r28
  94               		pop	r27
  95               		pop	r26
  96               		pop	r25
  97               		pop	r24
  98               		pop	r23
  99               		pop	r22
 100               		pop	r21
 101               		pop	r20
 102               		pop	r19
 103               		pop	r18
 104               		pop	r17
 105               		pop	r16
 106               		pop	r15
 107               		pop	r14
 108               		pop	r13
 109               		pop	r12
 110               		pop	r11
 111               		pop	r10
 112               		pop	r9
 113               		pop	r8
 114               		pop	r7
 115               		pop	r6
 116               		pop	r5
 117               		pop	r4
 118               		pop	r3
 119               		pop	r2
 120               		pop	r1
 121               		pop	r0
 122               	.endm
 123               	
 124               	        .section .text
 125               	        .global CSwitch
 126               	        .global Exit_Kernel
 127               	        .extern Dispatch
 128               	        .extern CurrentP     /* CurrentP->sp is the first entry in CurrentP's descriptor  */
 129               	/*
 130               	  * The actual CSwitch() code begins here.
 131               	  *
 132               	  * This function is called by a user task. Upon entry, we are using
 133               	  * the CurrentP's stack, on top of which contains the return address
 134               	  * of the call to CSwitch(). There are three phases in this function:
 135               	  *   1) save current CurrentP's context, and then its H/W stack pointer;
 136               	  *   2) choose a new CurrentP;
 137               	  *   3) restore the new CurrentP's context, i.e., restore its H/W stack pointer.
 138               	  *
 139               	  * Assumption: This function is executed with interrupts already disabled.
 140               	  *
 141               	  * Note: AVR devices use LITTLE endian format, i.e., a 16-bit value starts
 142               	  * with the lower-order byte first, then the higher-order byte.
 143               	  *
 144               	  * void CSwitch();
 145               	  * void Exit_Kernel();
 146               	  */
 147               	CSwitch:
 148               	        /*
 149               	          * Assume I = 0, i.e., all interrupts are disabled.
 150               	          */
 151:cswitch.S     ****         SAVECTX
 152               	        /*
 153               	          * Now, we have saved the CurrentP's context.
 154               	          * Save the current H/W stack pointer into CurrentP->sp.
 155               	          */
 156:cswitch.S     ****         lds  r30, CurrentP
 157:cswitch.S     ****         lds  r31, CurrentP+1   /* Z = (R31,R30) contains the "sp" */
 158:cswitch.S     ****         in   r27, SPL
 159:cswitch.S     ****         in   r28, SPH
 160:cswitch.S     ****         in   r29, EIND
 161:cswitch.S     ****         st   Z+, r27       /* store (R28=SPL,R29=SPH) indirectly via Z */
 162:cswitch.S     ****         st   Z+, r28       /* Now, CurrentP->sp = the current H/W stack pointer */
 163:cswitch.S     ****         st   Z+, r29
 164               	       /*
 165               	         * Now, we should select a new "CurrentP".
 166               	         */
 167               	Exit_Kernel:
 168:cswitch.S     ****         call Dispatch
 169               	        /*
 170               	          * We are now ready to restore a new CurrentP's context, i.e.,
 171               	          * switching the H/W stack pointer to this new CurrentP->sp.
 172               	          */
 173:cswitch.S     ****         lds  r30, CurrentP
 174:cswitch.S     ****         lds  r31, CurrentP+1  /* Z = (R31,R30) contains the new "sp" */
 175:cswitch.S     ****         ld   r27, Z+
 176:cswitch.S     ****         ld   r28, Z+
 177:cswitch.S     ****         ld   r29, Z+
 178:cswitch.S     ****         out  SPL, r27
 179:cswitch.S     ****         out  SPH, r28   /* Now, H/W stack pointer = CurrentP->sp */
 180:cswitch.S     ****         out  EIND, r29
 181               	        /*
 182               	          * We are now executing in our new CurrentP's stack.
 183               	          * Note: at the bottom of the CurrentP's context is its return address.
 184               	          */
 185:cswitch.S     ****         RESTORECTX
 186:cswitch.S     ****         sei
 187:cswitch.S     ****         ret    /* don't use rti to re-enable interrupts */
DEFINED SYMBOLS
           cswitch.S:23     *ABS*:000000000000003f SREG
           cswitch.S:24     *ABS*:000000000000003e SPH
           cswitch.S:25     *ABS*:000000000000003d SPL
           cswitch.S:26     *ABS*:000000000000003c EIND
           cswitch.S:147    .text:0000000000000000 CSwitch
           cswitch.S:167    .text:000000000000005c Exit_Kernel

UNDEFINED SYMBOLS
CurrentP
Dispatch
